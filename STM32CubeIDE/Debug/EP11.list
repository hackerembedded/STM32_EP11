
EP11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003d64  08003d64  00004d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003df8  08003df8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003df8  08003df8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00004df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00004dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003e0c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003e0c  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccf9  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002133  00000000  00000000  00011d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6c  00000000  00000000  00014bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b5a  00000000  00000000  00015664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f80a  00000000  00000000  0002e1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1860  00000000  00000000  0003d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000df26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e22e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d4c 	.word	0x08003d4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003d4c 	.word	0x08003d4c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	0018      	movs	r0, r3
 8000226:	230c      	movs	r3, #12
 8000228:	001a      	movs	r2, r3
 800022a:	2100      	movs	r1, #0
 800022c:	f003 fd62 	bl	8003cf4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000230:	4b2d      	ldr	r3, [pc, #180]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000232:	4a2e      	ldr	r2, [pc, #184]	@ (80002ec <MX_ADC1_Init+0xd0>)
 8000234:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000236:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000238:	2280      	movs	r2, #128	@ 0x80
 800023a:	05d2      	lsls	r2, r2, #23
 800023c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023e:	4b2a      	ldr	r3, [pc, #168]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000244:	4b28      	ldr	r3, [pc, #160]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024a:	4b27      	ldr	r3, [pc, #156]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000250:	4b25      	ldr	r3, [pc, #148]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000252:	2204      	movs	r2, #4
 8000254:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000256:	4b24      	ldr	r3, [pc, #144]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000258:	2200      	movs	r2, #0
 800025a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800025c:	4b22      	ldr	r3, [pc, #136]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800025e:	2200      	movs	r2, #0
 8000260:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000262:	4b21      	ldr	r3, [pc, #132]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000264:	2200      	movs	r2, #0
 8000266:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000268:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800026a:	2201      	movs	r2, #1
 800026c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800026e:	4b1e      	ldr	r3, [pc, #120]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000270:	2220      	movs	r2, #32
 8000272:	2100      	movs	r1, #0
 8000274:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000278:	2200      	movs	r2, #0
 800027a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800027c:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800027e:	2200      	movs	r2, #0
 8000280:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000282:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000284:	222c      	movs	r2, #44	@ 0x2c
 8000286:	2100      	movs	r1, #0
 8000288:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800028c:	2200      	movs	r2, #0
 800028e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000292:	2203      	movs	r2, #3
 8000294:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 8000298:	2200      	movs	r2, #0
 800029a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 800029e:	223c      	movs	r2, #60	@ 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fca3 	bl	8000bf8 <HAL_ADC_Init>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80002b6:	f000 f947 	bl	8000548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3a      	adds	r2, r7, #4
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <MX_ADC1_Init+0xcc>)
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ffe4 	bl	80012a0 <HAL_ADC_ConfigChannel>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80002dc:	f000 f934 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	46c0      	nop			@ (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b004      	add	sp, #16
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40012400 	.word	0x40012400

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	@ 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fcf6 	bl	8003cf4 <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a1c      	ldr	r2, [pc, #112]	@ (8000380 <HAL_ADC_MspInit+0x90>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d131      	bne.n	8000376 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000312:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 8000314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000316:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 8000318:	2180      	movs	r1, #128	@ 0x80
 800031a:	0349      	lsls	r1, r1, #13
 800031c:	430a      	orrs	r2, r1
 800031e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 8000322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000324:	2380      	movs	r3, #128	@ 0x80
 8000326:	035b      	lsls	r3, r3, #13
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 8000330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 8000334:	2101      	movs	r1, #1
 8000336:	430a      	orrs	r2, r1
 8000338:	635a      	str	r2, [r3, #52]	@ 0x34
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <HAL_ADC_MspInit+0x94>)
 800033c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800033e:	2201      	movs	r2, #1
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2201      	movs	r2, #1
 800034a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2203      	movs	r2, #3
 8000350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	193b      	adds	r3, r7, r4
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000358:	193a      	adds	r2, r7, r4
 800035a:	23a0      	movs	r3, #160	@ 0xa0
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	0011      	movs	r1, r2
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fceb 	bl	8001d3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 2, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2102      	movs	r1, #2
 800036a:	200c      	movs	r0, #12
 800036c:	f001 fcb4 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000370:	200c      	movs	r0, #12
 8000372:	f001 fcc6 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b00b      	add	sp, #44	@ 0x2c
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	40012400 	.word	0x40012400
 8000384:	40021000 	.word	0x40021000

08000388 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x40>)
 8000390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000392:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <MX_GPIO_Init+0x40>)
 8000394:	2101      	movs	r1, #1
 8000396:	430a      	orrs	r2, r1
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_GPIO_Init+0x40>)
 800039c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800039e:	2201      	movs	r2, #1
 80003a0:	4013      	ands	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_GPIO_Init+0x40>)
 80003a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003aa:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <MX_GPIO_Init+0x40>)
 80003ac:	2102      	movs	r1, #2
 80003ae:	430a      	orrs	r2, r1
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003b2:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <MX_GPIO_Init+0x40>)
 80003b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003b6:	2202      	movs	r2, #2
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fa28 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f81e 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f7ff ffd6 	bl	8000388 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003dc:	f7ff ff1e 	bl	800021c <MX_ADC1_Init>
  MX_TIM3_Init();
 80003e0:	f000 f90e 	bl	8000600 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <main+0x40>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 faae 	bl	8001948 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <main+0x40>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fdaa 	bl	8000f48 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <main+0x44>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f002 fb40 	bl	8002a7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <main+0x44>)
 80003fe:	2108      	movs	r1, #8
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fbf7 	bl	8002bf4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	e7fd      	b.n	8000406 <main+0x3a>
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000028 	.word	0x20000028
 8000410:	20000094 	.word	0x20000094

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b093      	sub	sp, #76	@ 0x4c
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2410      	movs	r4, #16
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2338      	movs	r3, #56	@ 0x38
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 fc65 	bl	8003cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	003b      	movs	r3, r7
 800042c:	0018      	movs	r0, r3
 800042e:	2310      	movs	r3, #16
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f003 fc5e 	bl	8003cf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f001 fde1 	bl	8002004 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2202      	movs	r2, #2
 8000446:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000450:	0021      	movs	r1, r4
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2240      	movs	r2, #64	@ 0x40
 800045c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2202      	movs	r2, #2
 8000462:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2202      	movs	r2, #2
 8000468:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2200      	movs	r2, #0
 800046e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2208      	movs	r2, #8
 8000474:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	0292      	lsls	r2, r2, #10
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2280      	movs	r2, #128	@ 0x80
 8000482:	0492      	lsls	r2, r2, #18
 8000484:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	0592      	lsls	r2, r2, #22
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	187b      	adds	r3, r7, r1
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fdf7 	bl	8002084 <HAL_RCC_OscConfig>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800049a:	f000 f855 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	003b      	movs	r3, r7
 80004a0:	2207      	movs	r2, #7
 80004a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a4:	003b      	movs	r3, r7
 80004a6:	2202      	movs	r2, #2
 80004a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	003b      	movs	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b0:	003b      	movs	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b6:	003b      	movs	r3, r7
 80004b8:	2102      	movs	r1, #2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 f8fc 	bl	80026b8 <HAL_RCC_ClockConfig>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004c4:	f000 f840 	bl	8000548 <Error_Handler>
  }
}
 80004c8:	46c0      	nop			@ (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b013      	add	sp, #76	@ 0x4c
 80004ce:	bd90      	pop	{r4, r7, pc}

080004d0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	adcValue = HAL_ADC_GetValue(hadc);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fdac 	bl	8001038 <HAL_ADC_GetValue>
 80004e0:	0002      	movs	r2, r0
 80004e2:	4b03      	ldr	r3, [pc, #12]	@ (80004f0 <HAL_ADC_ConvCpltCallback+0x20>)
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	2000008c 	.word	0x2000008c

080004f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	// Map ADC value to PWM duty cycle
	pwmValue = (adcValue * 9999) / 4095;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000502:	4353      	muls	r3, r2
 8000504:	490c      	ldr	r1, [pc, #48]	@ (8000538 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000506:	0018      	movs	r0, r3
 8000508:	f7ff fdfc 	bl	8000104 <__udivsi3>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000512:	601a      	str	r2, [r3, #0]

	// Update PWM output
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwmValue);
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a08      	ldr	r2, [pc, #32]	@ (800053c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800051a:	6812      	ldr	r2, [r2, #0]
 800051c:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_ADC_Start_IT(&hadc1);
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fd11 	bl	8000f48 <HAL_ADC_Start_IT>
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	2000008c 	.word	0x2000008c
 8000534:	0000270f 	.word	0x0000270f
 8000538:	00000fff 	.word	0x00000fff
 800053c:	20000090 	.word	0x20000090
 8000540:	20000094 	.word	0x20000094
 8000544:	20000028 	.word	0x20000028

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	e7fd      	b.n	8000550 <Error_Handler+0x8>

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_MspInit+0x44>)
 800055c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <HAL_MspInit+0x44>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	641a      	str	r2, [r3, #64]	@ 0x40
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_MspInit+0x44>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <HAL_MspInit+0x44>)
 8000574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_MspInit+0x44>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0549      	lsls	r1, r1, #21
 800057c:	430a      	orrs	r2, r1
 800057e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000580:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_MspInit+0x44>)
 8000582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000584:	2380      	movs	r3, #128	@ 0x80
 8000586:	055b      	lsls	r3, r3, #21
 8000588:	4013      	ands	r3, r2
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	40021000 	.word	0x40021000

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a0:	46c0      	nop			@ (mov r8, r8)
 80005a2:	e7fd      	b.n	80005a0 <NMI_Handler+0x4>

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	e7fd      	b.n	80005a8 <HardFault_Handler+0x4>

080005ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c4:	f000 f998 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <ADC1_COMP_IRQHandler+0x14>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fd3a 	bl	8001050 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	20000028 	.word	0x20000028

080005e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <TIM3_IRQHandler+0x14>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fbea 	bl	8002dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	20000094 	.word	0x20000094

08000600 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	@ 0x38
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000606:	2328      	movs	r3, #40	@ 0x28
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	0018      	movs	r0, r3
 800060c:	2310      	movs	r3, #16
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f003 fb6f 	bl	8003cf4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000616:	231c      	movs	r3, #28
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	230c      	movs	r3, #12
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 fb67 	bl	8003cf4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	231c      	movs	r3, #28
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fb60 	bl	8003cf4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000634:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <MX_TIM3_Init+0xf8>)
 8000638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800063a:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 800063c:	223f      	movs	r2, #63	@ 0x3f
 800063e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000648:	4a2c      	ldr	r2, [pc, #176]	@ (80006fc <MX_TIM3_Init+0xfc>)
 800064a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 800065a:	0018      	movs	r0, r3
 800065c:	f002 f9b6 	bl	80029cc <HAL_TIM_Base_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000664:	f7ff ff70 	bl	8000548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000668:	2128      	movs	r1, #40	@ 0x28
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	0152      	lsls	r2, r2, #5
 8000670:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000672:	187a      	adds	r2, r7, r1
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000676:	0011      	movs	r1, r2
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fdad 	bl	80031d8 <HAL_TIM_ConfigClockSource>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000682:	f7ff ff61 	bl	8000548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fa53 	bl	8002b34 <HAL_TIM_PWM_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000692:	f7ff ff59 	bl	8000548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000696:	211c      	movs	r1, #28
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a4:	187a      	adds	r2, r7, r1
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f003 fa9c 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006b4:	f7ff ff48 	bl	8000548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2260      	movs	r2, #96	@ 0x60
 80006bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d0:	0039      	movs	r1, r7
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 80006d4:	2208      	movs	r2, #8
 80006d6:	0018      	movs	r0, r3
 80006d8:	f002 fc7e 	bl	8002fd8 <HAL_TIM_PWM_ConfigChannel>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006e0:	f7ff ff32 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006e4:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <MX_TIM3_Init+0xf4>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f830 	bl	800074c <HAL_TIM_MspPostInit>

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b00e      	add	sp, #56	@ 0x38
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000094 	.word	0x20000094
 80006f8:	40000400 	.word	0x40000400
 80006fc:	0000270f 	.word	0x0000270f

08000700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <HAL_TIM_Base_MspInit+0x44>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d113      	bne.n	800073a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <HAL_TIM_Base_MspInit+0x48>)
 8000714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <HAL_TIM_Base_MspInit+0x48>)
 8000718:	2102      	movs	r1, #2
 800071a:	430a      	orrs	r2, r1
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <HAL_TIM_Base_MspInit+0x48>)
 8000720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2010      	movs	r0, #16
 8000730:	f001 fad2 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000734:	2010      	movs	r0, #16
 8000736:	f001 fae4 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b004      	add	sp, #16
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40000400 	.word	0x40000400
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b089      	sub	sp, #36	@ 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	240c      	movs	r4, #12
 8000756:	193b      	adds	r3, r7, r4
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f003 fac8 	bl	8003cf4 <memset>
  if(timHandle->Instance==TIM3)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a14      	ldr	r2, [pc, #80]	@ (80007bc <HAL_TIM_MspPostInit+0x70>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d121      	bne.n	80007b2 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <HAL_TIM_MspPostInit+0x74>)
 8000770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <HAL_TIM_MspPostInit+0x74>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <HAL_TIM_MspPostInit+0x74>)
 800077c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	4a06      	ldr	r2, [pc, #24]	@ (80007c4 <HAL_TIM_MspPostInit+0x78>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f001 fac5 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b009      	add	sp, #36	@ 0x24
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40000400 	.word	0x40000400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	50000400 	.word	0x50000400

080007c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007cc:	f000 f825 	bl	800081a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	@ (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f6:	f003 fa85 	bl	8003d04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007fa:	f7ff fde7 	bl	80003cc <main>

080007fe <LoopForever>:

LoopForever:
  b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   r0, =_estack
 8000800:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800080c:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 8000810:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000814:	200000e4 	.word	0x200000e4

08000818 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <CEC_IRQHandler>

0800081a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <HAL_Init+0x3c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <HAL_Init+0x3c>)
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	0049      	lsls	r1, r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800083e:	2003      	movs	r0, #3
 8000840:	f000 f810 	bl	8000864 <HAL_InitTick>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d003      	beq.n	8000850 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e001      	b.n	8000854 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000850:	f7ff fe80 	bl	8000554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800086c:	230f      	movs	r3, #15
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <HAL_InitTick+0x88>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d02b      	beq.n	80008d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_InitTick+0x8c>)
 800087e:	681c      	ldr	r4, [r3, #0]
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <HAL_InitTick+0x88>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	0019      	movs	r1, r3
 8000886:	23fa      	movs	r3, #250	@ 0xfa
 8000888:	0098      	lsls	r0, r3, #2
 800088a:	f7ff fc3b 	bl	8000104 <__udivsi3>
 800088e:	0003      	movs	r3, r0
 8000890:	0019      	movs	r1, r3
 8000892:	0020      	movs	r0, r4
 8000894:	f7ff fc36 	bl	8000104 <__udivsi3>
 8000898:	0003      	movs	r3, r0
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fa41 	bl	8001d22 <HAL_SYSTICK_Config>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d112      	bne.n	80008ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d80a      	bhi.n	80008c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fa10 	bl	8001cd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <HAL_InitTick+0x90>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e00d      	b.n	80008dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e008      	b.n	80008dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ca:	230f      	movs	r3, #15
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e003      	b.n	80008dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d4:	230f      	movs	r3, #15
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b005      	add	sp, #20
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	18d2      	adds	r2, r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_IncTick+0x20>)
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000008 	.word	0x20000008
 8000918:	200000e0 	.word	0x200000e0

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	@ (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	200000e0 	.word	0x200000e0

08000930 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000940:	401a      	ands	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	601a      	str	r2, [r3, #0]
}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	fe3fffff 	.word	0xfe3fffff

08000958 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	23e0      	movs	r3, #224	@ 0xe0
 8000966:	045b      	lsls	r3, r3, #17
 8000968:	4013      	ands	r3, r2
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}

08000972 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	2104      	movs	r1, #4
 8000986:	400a      	ands	r2, r1
 8000988:	2107      	movs	r1, #7
 800098a:	4091      	lsls	r1, r2
 800098c:	000a      	movs	r2, r1
 800098e:	43d2      	mvns	r2, r2
 8000990:	401a      	ands	r2, r3
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2104      	movs	r1, #4
 8000996:	400b      	ands	r3, r1
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	4099      	lsls	r1, r3
 800099c:	000b      	movs	r3, r1
 800099e:	431a      	orrs	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b004      	add	sp, #16
 80009aa:	bd80      	pop	{r7, pc}

080009ac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	2104      	movs	r1, #4
 80009be:	400a      	ands	r2, r1
 80009c0:	2107      	movs	r1, #7
 80009c2:	4091      	lsls	r1, r2
 80009c4:	000a      	movs	r2, r1
 80009c6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2104      	movs	r1, #4
 80009cc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80009ce:	40da      	lsrs	r2, r3
 80009d0:	0013      	movs	r3, r2
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	23c0      	movs	r3, #192	@ 0xc0
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4013      	ands	r3, r2
 80009ec:	d101      	bne.n	80009f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0c:	68ba      	ldr	r2, [r7, #8]
 8000a0e:	211f      	movs	r1, #31
 8000a10:	400a      	ands	r2, r1
 8000a12:	210f      	movs	r1, #15
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	0e9b      	lsrs	r3, r3, #26
 8000a20:	210f      	movs	r1, #15
 8000a22:	4019      	ands	r1, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	201f      	movs	r0, #31
 8000a28:	4003      	ands	r3, r0
 8000a2a:	4099      	lsls	r1, r3
 8000a2c:	000b      	movs	r3, r1
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b004      	add	sp, #16
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	035b      	lsls	r3, r3, #13
 8000a4e:	0b5b      	lsrs	r3, r3, #13
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	0352      	lsls	r2, r2, #13
 8000a70:	0b52      	lsrs	r2, r2, #13
 8000a72:	43d2      	mvns	r2, r2
 8000a74:	401a      	ands	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	4013      	ands	r3, r2
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	68ba      	ldr	r2, [r7, #8]
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	43d2      	mvns	r2, r2
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	400b      	ands	r3, r1
 8000abc:	4904      	ldr	r1, [pc, #16]	@ (8000ad0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000abe:	400b      	ands	r3, r1
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	07ffff00 	.word	0x07ffff00

08000ad4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2280      	movs	r2, #128	@ 0x80
 8000ae6:	0552      	lsls	r2, r2, #21
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	6fffffe8 	.word	0x6fffffe8

08000afc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	055b      	lsls	r3, r3, #21
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	055b      	lsls	r3, r3, #21
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d101      	bne.n	8000b1a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <LL_ADC_Enable+0x20>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	2201      	movs	r2, #1
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	7fffffe8 	.word	0x7fffffe8

08000b48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <LL_ADC_Disable+0x20>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	2202      	movs	r2, #2
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b002      	add	sp, #8
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	7fffffe8 	.word	0x7fffffe8

08000b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d101      	bne.n	8000b84 <LL_ADC_IsEnabled+0x18>
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <LL_ADC_IsEnabled+0x1a>
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d101      	bne.n	8000ba6 <LL_ADC_IsDisableOngoing+0x18>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <LL_ADC_IsDisableOngoing+0x1a>
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <LL_ADC_REG_StartConversion+0x20>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	7fffffe8 	.word	0x7fffffe8

08000bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2204      	movs	r2, #4
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d101      	bne.n	8000bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c00:	231f      	movs	r3, #31
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e17f      	b.n	8000f1e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10a      	bne.n	8000c3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff fb61 	bl	80002f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2254      	movs	r2, #84	@ 0x54
 8000c38:	2100      	movs	r1, #0
 8000c3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ff5b 	bl	8000afc <LL_ADC_IsInternalRegulatorEnabled>
 8000c46:	1e03      	subs	r3, r0, #0
 8000c48:	d115      	bne.n	8000c76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff ff40 	bl	8000ad4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c54:	4bb4      	ldr	r3, [pc, #720]	@ (8000f28 <HAL_ADC_Init+0x330>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	49b4      	ldr	r1, [pc, #720]	@ (8000f2c <HAL_ADC_Init+0x334>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fa52 	bl	8000104 <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	3301      	adds	r3, #1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c68:	e002      	b.n	8000c70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f9      	bne.n	8000c6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff ff3e 	bl	8000afc <LL_ADC_IsInternalRegulatorEnabled>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d10f      	bne.n	8000ca4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	2210      	movs	r2, #16
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c94:	2201      	movs	r2, #1
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c9c:	231f      	movs	r3, #31
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff93 	bl	8000bd4 <LL_ADC_REG_IsConversionOngoing>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d000      	beq.n	8000cbe <HAL_ADC_Init+0xc6>
 8000cbc:	e122      	b.n	8000f04 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d000      	beq.n	8000cc6 <HAL_ADC_Init+0xce>
 8000cc4:	e11e      	b.n	8000f04 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	4a99      	ldr	r2, [pc, #612]	@ (8000f30 <HAL_ADC_Init+0x338>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2202      	movs	r2, #2
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff ff46 	bl	8000b6c <LL_ADC_IsEnabled>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d000      	beq.n	8000ce6 <HAL_ADC_Init+0xee>
 8000ce4:	e0ad      	b.n	8000e42 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7e1b      	ldrb	r3, [r3, #24]
 8000cee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000cf0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7e5b      	ldrb	r3, [r3, #25]
 8000cf6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cf8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e9b      	ldrb	r3, [r3, #26]
 8000cfe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d00:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <HAL_ADC_Init+0x118>
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	015b      	lsls	r3, r3, #5
 8000d0e:	e000      	b.n	8000d12 <HAL_ADC_Init+0x11a>
 8000d10:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d12:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d18:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	da04      	bge.n	8000d2c <HAL_ADC_Init+0x134>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	e001      	b.n	8000d30 <HAL_ADC_Init+0x138>
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000d30:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	212c      	movs	r1, #44	@ 0x2c
 8000d36:	5c5b      	ldrb	r3, [r3, r1]
 8000d38:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d3a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2220      	movs	r2, #32
 8000d46:	5c9b      	ldrb	r3, [r3, r2]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d115      	bne.n	8000d78 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7e9b      	ldrb	r3, [r3, #26]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	0252      	lsls	r2, r2, #9
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e00b      	b.n	8000d78 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d64:	2220      	movs	r2, #32
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d70:	2201      	movs	r2, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00a      	beq.n	8000d96 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d84:	23e0      	movs	r3, #224	@ 0xe0
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4a65      	ldr	r2, [pc, #404]	@ (8000f34 <HAL_ADC_Init+0x33c>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	0019      	movs	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	0f9b      	lsrs	r3, r3, #30
 8000db2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000db8:	4313      	orrs	r3, r2
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	223c      	movs	r2, #60	@ 0x3c
 8000dc4:	5c9b      	ldrb	r3, [r3, r2]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d111      	bne.n	8000dee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	0f9b      	lsrs	r3, r3, #30
 8000dd0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000dd6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000ddc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000de2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	2201      	movs	r2, #1
 8000dea:	4313      	orrs	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	4a50      	ldr	r2, [pc, #320]	@ (8000f38 <HAL_ADC_Init+0x340>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	0019      	movs	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	061b      	lsls	r3, r3, #24
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d018      	beq.n	8000e42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d012      	beq.n	8000e42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	061b      	lsls	r3, r3, #24
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d00c      	beq.n	8000e42 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000e28:	4b44      	ldr	r3, [pc, #272]	@ (8000f3c <HAL_ADC_Init+0x344>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a44      	ldr	r2, [pc, #272]	@ (8000f40 <HAL_ADC_Init+0x348>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	0019      	movs	r1, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	23f0      	movs	r3, #240	@ 0xf0
 8000e38:	039b      	lsls	r3, r3, #14
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f3c <HAL_ADC_Init+0x344>)
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f7ff fd90 	bl	8000972 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e5a:	493a      	ldr	r1, [pc, #232]	@ (8000f44 <HAL_ADC_Init+0x34c>)
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	f7ff fd88 	bl	8000972 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2110      	movs	r1, #16
 8000e76:	4249      	negs	r1, r1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e7c:	e018      	b.n	8000eb0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	2380      	movs	r3, #128	@ 0x80
 8000e84:	039b      	lsls	r3, r3, #14
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d112      	bne.n	8000eb0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	221c      	movs	r2, #28
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff fd78 	bl	80009ac <LL_ADC_GetSamplingTimeCommonChannels>
 8000ebc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d10b      	bne.n	8000ede <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	4393      	bics	r3, r2
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000edc:	e01c      	b.n	8000f18 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	2212      	movs	r2, #18
 8000ee4:	4393      	bics	r3, r2
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8000efa:	231f      	movs	r3, #31
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f02:	e009      	b.n	8000f18 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	2210      	movs	r2, #16
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000f10:	231f      	movs	r3, #31
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000f18:	231f      	movs	r3, #31
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b008      	add	sp, #32
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	00030d40 	.word	0x00030d40
 8000f30:	fffffefd 	.word	0xfffffefd
 8000f34:	ffde0201 	.word	0xffde0201
 8000f38:	1ffffc02 	.word	0x1ffffc02
 8000f3c:	40012708 	.word	0x40012708
 8000f40:	ffc3ffff 	.word	0xffc3ffff
 8000f44:	07ffff04 	.word	0x07ffff04

08000f48 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fe3d 	bl	8000bd4 <LL_ADC_REG_IsConversionOngoing>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d15f      	bne.n	800101e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2254      	movs	r2, #84	@ 0x54
 8000f62:	5c9b      	ldrb	r3, [r3, r2]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_ADC_Start_IT+0x24>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e05f      	b.n	800102c <HAL_ADC_Start_IT+0xe4>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2254      	movs	r2, #84	@ 0x54
 8000f70:	2101      	movs	r1, #1
 8000f72:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f74:	250f      	movs	r5, #15
 8000f76:	197c      	adds	r4, r7, r5
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fb68 	bl	8001650 <ADC_Enable>
 8000f80:	0003      	movs	r3, r0
 8000f82:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f84:	197b      	adds	r3, r7, r5
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d143      	bne.n	8001014 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <HAL_ADC_Start_IT+0xec>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	221c      	movs	r2, #28
 8000faa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2254      	movs	r2, #84	@ 0x54
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	211c      	movs	r1, #28
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d108      	bne.n	8000fde <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2108      	movs	r1, #8
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
          break;
 8000fdc:	e008      	b.n	8000ff0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	605a      	str	r2, [r3, #4]
          break;
 8000fee:	46c0      	nop			@ (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d107      	bne.n	8001008 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2110      	movs	r1, #16
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff fdcf 	bl	8000bb0 <LL_ADC_REG_StartConversion>
 8001012:	e008      	b.n	8001026 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2254      	movs	r2, #84	@ 0x54
 8001018:	2100      	movs	r1, #0
 800101a:	5499      	strb	r1, [r3, r2]
 800101c:	e003      	b.n	8001026 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001026:	230f      	movs	r3, #15
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	fffff0fe 	.word	0xfffff0fe

08001038 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	d017      	beq.n	80010a4 <HAL_ADC_IRQHandler+0x54>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d013      	beq.n	80010a4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	2210      	movs	r2, #16
 8001082:	4013      	ands	r3, r2
 8001084:	d106      	bne.n	8001094 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	2280      	movs	r2, #128	@ 0x80
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f000 fd62 	bl	8001b60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2202      	movs	r2, #2
 80010a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2204      	movs	r2, #4
 80010a8:	4013      	ands	r3, r2
 80010aa:	d003      	beq.n	80010b4 <HAL_ADC_IRQHandler+0x64>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	d107      	bne.n	80010c4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2208      	movs	r2, #8
 80010b8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80010ba:	d04d      	beq.n	8001158 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2208      	movs	r2, #8
 80010c0:	4013      	ands	r3, r2
 80010c2:	d049      	beq.n	8001158 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c8:	2210      	movs	r2, #16
 80010ca:	4013      	ands	r3, r2
 80010cc:	d106      	bne.n	80010dc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fc7a 	bl	80009da <LL_ADC_REG_IsTriggerSourceSWStart>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d02e      	beq.n	8001148 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7e9b      	ldrb	r3, [r3, #26]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d12a      	bne.n	8001148 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2208      	movs	r2, #8
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d123      	bne.n	8001148 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fd65 	bl	8000bd4 <LL_ADC_REG_IsConversionOngoing>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d110      	bne.n	8001130 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	210c      	movs	r1, #12
 800111a:	438a      	bics	r2, r1
 800111c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	4a56      	ldr	r2, [pc, #344]	@ (800127c <HAL_ADC_IRQHandler+0x22c>)
 8001124:	4013      	ands	r3, r2
 8001126:	2201      	movs	r2, #1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	659a      	str	r2, [r3, #88]	@ 0x58
 800112e:	e00b      	b.n	8001148 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001134:	2220      	movs	r2, #32
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001140:	2201      	movs	r2, #1
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0018      	movs	r0, r3
 800114c:	f7ff f9c0 	bl	80004d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	220c      	movs	r2, #12
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2280      	movs	r2, #128	@ 0x80
 800115c:	4013      	ands	r3, r2
 800115e:	d012      	beq.n	8001186 <HAL_ADC_IRQHandler+0x136>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	4013      	ands	r3, r2
 8001166:	d00e      	beq.n	8001186 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	0252      	lsls	r2, r2, #9
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0018      	movs	r0, r3
 800117a:	f000 f881 	bl	8001280 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2280      	movs	r2, #128	@ 0x80
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4013      	ands	r3, r2
 800118e:	d014      	beq.n	80011ba <HAL_ADC_IRQHandler+0x16a>
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	2380      	movs	r3, #128	@ 0x80
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4013      	ands	r3, r2
 8001198:	d00f      	beq.n	80011ba <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	2280      	movs	r2, #128	@ 0x80
 80011a0:	0292      	lsls	r2, r2, #10
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 fcc8 	bl	8001b40 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2280      	movs	r2, #128	@ 0x80
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d014      	beq.n	80011ee <HAL_ADC_IRQHandler+0x19e>
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d00f      	beq.n	80011ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	2280      	movs	r2, #128	@ 0x80
 80011d4:	02d2      	lsls	r2, r2, #11
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fcb6 	bl	8001b50 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2210      	movs	r2, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_ADC_IRQHandler+0x1fe>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2210      	movs	r2, #16
 80011fa:	4013      	ands	r3, r2
 80011fc:	d027      	beq.n	800124e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e008      	b.n	800121e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fc36 	bl	8000a82 <LL_ADC_REG_GetDMATransfer>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800121a:	2301      	movs	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d110      	bne.n	8001246 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	2280      	movs	r2, #128	@ 0x80
 800122a:	00d2      	lsls	r2, r2, #3
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001236:	2202      	movs	r2, #2
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f000 f825 	bl	8001290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2210      	movs	r2, #16
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	4013      	ands	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_ADC_IRQHandler+0x224>
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	4013      	ands	r3, r2
 8001260:	d008      	beq.n	8001274 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	0018      	movs	r0, r3
 8001266:	f000 fc83 	bl	8001b70 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	0192      	lsls	r2, r2, #6
 8001272:	601a      	str	r2, [r3, #0]
  }
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b006      	add	sp, #24
 800127a:	bd80      	pop	{r7, pc}
 800127c:	fffffefe 	.word	0xfffffefe

08001280 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012aa:	2317      	movs	r3, #23
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2254      	movs	r2, #84	@ 0x54
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x24>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e1c0      	b.n	8001646 <HAL_ADC_ConfigChannel+0x3a6>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2254      	movs	r2, #84	@ 0x54
 80012c8:	2101      	movs	r1, #1
 80012ca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fc7f 	bl	8000bd4 <LL_ADC_REG_IsConversionOngoing>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d000      	beq.n	80012dc <HAL_ADC_ConfigChannel+0x3c>
 80012da:	e1a3      	b.n	8001624 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d100      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x46>
 80012e4:	e143      	b.n	800156e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d004      	beq.n	80012fc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012f6:	4ac1      	ldr	r2, [pc, #772]	@ (80015fc <HAL_ADC_ConfigChannel+0x35c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d108      	bne.n	800130e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	0010      	movs	r0, r2
 8001308:	f7ff fb98 	bl	8000a3c <LL_ADC_REG_SetSequencerChAdd>
 800130c:	e0c9      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	211f      	movs	r1, #31
 8001318:	400b      	ands	r3, r1
 800131a:	210f      	movs	r1, #15
 800131c:	4099      	lsls	r1, r3
 800131e:	000b      	movs	r3, r1
 8001320:	43db      	mvns	r3, r3
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	035b      	lsls	r3, r3, #13
 800132c:	0b5b      	lsrs	r3, r3, #13
 800132e:	d105      	bne.n	800133c <HAL_ADC_ConfigChannel+0x9c>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0e9b      	lsrs	r3, r3, #26
 8001336:	221f      	movs	r2, #31
 8001338:	4013      	ands	r3, r2
 800133a:	e098      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	d000      	beq.n	8001348 <HAL_ADC_ConfigChannel+0xa8>
 8001346:	e091      	b.n	800146c <HAL_ADC_ConfigChannel+0x1cc>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d000      	beq.n	8001354 <HAL_ADC_ConfigChannel+0xb4>
 8001352:	e089      	b.n	8001468 <HAL_ADC_ConfigChannel+0x1c8>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d000      	beq.n	8001360 <HAL_ADC_ConfigChannel+0xc0>
 800135e:	e081      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1c4>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2208      	movs	r2, #8
 8001366:	4013      	ands	r3, r2
 8001368:	d000      	beq.n	800136c <HAL_ADC_ConfigChannel+0xcc>
 800136a:	e079      	b.n	8001460 <HAL_ADC_ConfigChannel+0x1c0>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2210      	movs	r2, #16
 8001372:	4013      	ands	r3, r2
 8001374:	d000      	beq.n	8001378 <HAL_ADC_ConfigChannel+0xd8>
 8001376:	e071      	b.n	800145c <HAL_ADC_ConfigChannel+0x1bc>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2220      	movs	r2, #32
 800137e:	4013      	ands	r3, r2
 8001380:	d000      	beq.n	8001384 <HAL_ADC_ConfigChannel+0xe4>
 8001382:	e069      	b.n	8001458 <HAL_ADC_ConfigChannel+0x1b8>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2240      	movs	r2, #64	@ 0x40
 800138a:	4013      	ands	r3, r2
 800138c:	d000      	beq.n	8001390 <HAL_ADC_ConfigChannel+0xf0>
 800138e:	e061      	b.n	8001454 <HAL_ADC_ConfigChannel+0x1b4>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2280      	movs	r2, #128	@ 0x80
 8001396:	4013      	ands	r3, r2
 8001398:	d000      	beq.n	800139c <HAL_ADC_ConfigChannel+0xfc>
 800139a:	e059      	b.n	8001450 <HAL_ADC_ConfigChannel+0x1b0>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d151      	bne.n	800144c <HAL_ADC_ConfigChannel+0x1ac>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d149      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1a8>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	d141      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1a4>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d139      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1a0>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	015b      	lsls	r3, r3, #5
 80013d4:	4013      	ands	r3, r2
 80013d6:	d131      	bne.n	800143c <HAL_ADC_ConfigChannel+0x19c>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	019b      	lsls	r3, r3, #6
 80013e0:	4013      	ands	r3, r2
 80013e2:	d129      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x198>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	01db      	lsls	r3, r3, #7
 80013ec:	4013      	ands	r3, r2
 80013ee:	d121      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x194>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4013      	ands	r3, r2
 80013fa:	d119      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x190>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	025b      	lsls	r3, r3, #9
 8001404:	4013      	ands	r3, r2
 8001406:	d111      	bne.n	800142c <HAL_ADC_ConfigChannel+0x18c>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	4013      	ands	r3, r2
 8001412:	d109      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x188>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	02db      	lsls	r3, r3, #11
 800141c:	4013      	ands	r3, r2
 800141e:	d001      	beq.n	8001424 <HAL_ADC_ConfigChannel+0x184>
 8001420:	2312      	movs	r3, #18
 8001422:	e024      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001424:	2300      	movs	r3, #0
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001428:	2311      	movs	r3, #17
 800142a:	e020      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800142c:	2310      	movs	r3, #16
 800142e:	e01e      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001430:	230f      	movs	r3, #15
 8001432:	e01c      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001434:	230e      	movs	r3, #14
 8001436:	e01a      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001438:	230d      	movs	r3, #13
 800143a:	e018      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800143c:	230c      	movs	r3, #12
 800143e:	e016      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001440:	230b      	movs	r3, #11
 8001442:	e014      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001444:	230a      	movs	r3, #10
 8001446:	e012      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001448:	2309      	movs	r3, #9
 800144a:	e010      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800144c:	2308      	movs	r3, #8
 800144e:	e00e      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001450:	2307      	movs	r3, #7
 8001452:	e00c      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001454:	2306      	movs	r3, #6
 8001456:	e00a      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	2305      	movs	r3, #5
 800145a:	e008      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800145c:	2304      	movs	r3, #4
 800145e:	e006      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001460:	2303      	movs	r3, #3
 8001462:	e004      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_ADC_ConfigChannel+0x1ce>
 800146c:	2300      	movs	r3, #0
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	6852      	ldr	r2, [r2, #4]
 8001472:	201f      	movs	r0, #31
 8001474:	4002      	ands	r2, r0
 8001476:	4093      	lsls	r3, r2
 8001478:	000a      	movs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	429a      	cmp	r2, r3
 800148e:	d808      	bhi.n	80014a2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	001a      	movs	r2, r3
 800149e:	f7ff faad 	bl	80009fc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	001a      	movs	r2, r3
 80014b0:	f7ff faf4 	bl	8000a9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db00      	blt.n	80014be <HAL_ADC_ConfigChannel+0x21e>
 80014bc:	e0bc      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014be:	4b50      	ldr	r3, [pc, #320]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fa49 	bl	8000958 <LL_ADC_GetCommonPathInternalCh>
 80014c6:	0003      	movs	r3, r0
 80014c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001604 <HAL_ADC_ConfigChannel+0x364>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d122      	bne.n	800151a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014dc:	d11d      	bne.n	800151a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	0412      	lsls	r2, r2, #16
 80014e4:	4313      	orrs	r3, r2
 80014e6:	4a46      	ldr	r2, [pc, #280]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 80014e8:	0019      	movs	r1, r3
 80014ea:	0010      	movs	r0, r2
 80014ec:	f7ff fa20 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f0:	4b45      	ldr	r3, [pc, #276]	@ (8001608 <HAL_ADC_ConfigChannel+0x368>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4945      	ldr	r1, [pc, #276]	@ (800160c <HAL_ADC_ConfigChannel+0x36c>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7fe fe04 	bl	8000104 <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	0013      	movs	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	189b      	adds	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800150a:	e002      	b.n	8001512 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3b01      	subs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001518:	e08e      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3c      	ldr	r2, [pc, #240]	@ (8001610 <HAL_ADC_ConfigChannel+0x370>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d10e      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	2380      	movs	r3, #128	@ 0x80
 8001528:	045b      	lsls	r3, r3, #17
 800152a:	4013      	ands	r3, r2
 800152c:	d109      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	2280      	movs	r2, #128	@ 0x80
 8001532:	0452      	lsls	r2, r2, #17
 8001534:	4313      	orrs	r3, r2
 8001536:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 8001538:	0019      	movs	r1, r3
 800153a:	0010      	movs	r0, r2
 800153c:	f7ff f9f8 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
 8001540:	e07a      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <HAL_ADC_ConfigChannel+0x374>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d000      	beq.n	800154e <HAL_ADC_ConfigChannel+0x2ae>
 800154c:	e074      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	03db      	lsls	r3, r3, #15
 8001554:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001556:	d000      	beq.n	800155a <HAL_ADC_ConfigChannel+0x2ba>
 8001558:	e06e      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	03d2      	lsls	r2, r2, #15
 8001560:	4313      	orrs	r3, r2
 8001562:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 8001564:	0019      	movs	r1, r3
 8001566:	0010      	movs	r0, r2
 8001568:	f7ff f9e2 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
 800156c:	e064      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	429a      	cmp	r2, r3
 8001578:	d004      	beq.n	8001584 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800157e:	4a1f      	ldr	r2, [pc, #124]	@ (80015fc <HAL_ADC_ConfigChannel+0x35c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d107      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0019      	movs	r1, r3
 800158e:	0010      	movs	r0, r2
 8001590:	f7ff fa65 	bl	8000a5e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	da4d      	bge.n	8001638 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800159c:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff f9da 	bl	8000958 <LL_ADC_GetCommonPathInternalCh>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <HAL_ADC_ConfigChannel+0x364>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d108      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4a18      	ldr	r2, [pc, #96]	@ (8001618 <HAL_ADC_ConfigChannel+0x378>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 80015ba:	0019      	movs	r1, r3
 80015bc:	0010      	movs	r0, r2
 80015be:	f7ff f9b7 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
 80015c2:	e039      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	@ (8001610 <HAL_ADC_ConfigChannel+0x370>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4a12      	ldr	r2, [pc, #72]	@ (800161c <HAL_ADC_ConfigChannel+0x37c>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 80015d6:	0019      	movs	r1, r3
 80015d8:	0010      	movs	r0, r2
 80015da:	f7ff f9a9 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
 80015de:	e02b      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <HAL_ADC_ConfigChannel+0x374>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d126      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_ADC_ConfigChannel+0x380>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	@ (8001600 <HAL_ADC_ConfigChannel+0x360>)
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f7ff f99b 	bl	8000930 <LL_ADC_SetCommonPathInternalCh>
 80015fa:	e01d      	b.n	8001638 <HAL_ADC_ConfigChannel+0x398>
 80015fc:	80000004 	.word	0x80000004
 8001600:	40012708 	.word	0x40012708
 8001604:	b0001000 	.word	0xb0001000
 8001608:	20000000 	.word	0x20000000
 800160c:	00030d40 	.word	0x00030d40
 8001610:	b8004000 	.word	0xb8004000
 8001614:	b4002000 	.word	0xb4002000
 8001618:	ff7fffff 	.word	0xff7fffff
 800161c:	feffffff 	.word	0xfeffffff
 8001620:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	2220      	movs	r2, #32
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001630:	2317      	movs	r3, #23
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2254      	movs	r2, #84	@ 0x54
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001640:	2317      	movs	r3, #23
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	781b      	ldrb	r3, [r3, #0]
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b006      	add	sp, #24
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)

08001650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fa83 	bl	8000b6c <LL_ADC_IsEnabled>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d000      	beq.n	800166c <ADC_Enable+0x1c>
 800166a:	e069      	b.n	8001740 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a36      	ldr	r2, [pc, #216]	@ (800174c <ADC_Enable+0xfc>)
 8001674:	4013      	ands	r3, r2
 8001676:	d00d      	beq.n	8001694 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	2210      	movs	r2, #16
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	2201      	movs	r2, #1
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e056      	b.n	8001742 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fa43 	bl	8000b24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800169e:	4b2c      	ldr	r3, [pc, #176]	@ (8001750 <ADC_Enable+0x100>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff f959 	bl	8000958 <LL_ADC_GetCommonPathInternalCh>
 80016a6:	0002      	movs	r2, r0
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	4013      	ands	r3, r2
 80016ae:	d00f      	beq.n	80016d0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b0:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <ADC_Enable+0x104>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4928      	ldr	r1, [pc, #160]	@ (8001758 <ADC_Enable+0x108>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe fd24 	bl	8000104 <__udivsi3>
 80016bc:	0003      	movs	r3, r0
 80016be:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80016c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016c2:	e002      	b.n	80016ca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e5b      	ldrb	r3, [r3, #25]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d033      	beq.n	8001740 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80016d8:	f7ff f920 	bl	800091c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016e0:	e027      	b.n	8001732 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7ff fa40 	bl	8000b6c <LL_ADC_IsEnabled>
 80016ec:	1e03      	subs	r3, r0, #0
 80016ee:	d104      	bne.n	80016fa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7ff fa15 	bl	8000b24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016fa:	f7ff f90f 	bl	800091c <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d914      	bls.n	8001732 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	4013      	ands	r3, r2
 8001712:	2b01      	cmp	r3, #1
 8001714:	d00d      	beq.n	8001732 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	2210      	movs	r2, #16
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	2201      	movs	r2, #1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e007      	b.n	8001742 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	2b01      	cmp	r3, #1
 800173e:	d1d0      	bne.n	80016e2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	80000017 	.word	0x80000017
 8001750:	40012708 	.word	0x40012708
 8001754:	20000000 	.word	0x20000000
 8001758:	00030d40 	.word	0x00030d40

0800175c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff fa10 	bl	8000b8e <LL_ADC_IsDisableOngoing>
 800176e:	0003      	movs	r3, r0
 8001770:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff f9f8 	bl	8000b6c <LL_ADC_IsEnabled>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d046      	beq.n	800180e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d143      	bne.n	800180e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2205      	movs	r2, #5
 800178e:	4013      	ands	r3, r2
 8001790:	2b01      	cmp	r3, #1
 8001792:	d10d      	bne.n	80017b0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff f9d5 	bl	8000b48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2203      	movs	r2, #3
 80017a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a6:	f7ff f8b9 	bl	800091c <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017ae:	e028      	b.n	8001802 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b4:	2210      	movs	r2, #16
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e021      	b.n	8001810 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017cc:	f7ff f8a6 	bl	800091c <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d913      	bls.n	8001802 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4013      	ands	r3, r2
 80017e4:	d00d      	beq.n	8001802 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	2210      	movs	r2, #16
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	2201      	movs	r2, #1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e006      	b.n	8001810 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	d1de      	bne.n	80017cc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}

08001818 <LL_ADC_GetCommonClock>:
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	23f0      	movs	r3, #240	@ 0xf0
 8001826:	039b      	lsls	r3, r3, #14
 8001828:	4013      	ands	r3, r2
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <LL_ADC_GetClock>:
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	0f9b      	lsrs	r3, r3, #30
 8001840:	079b      	lsls	r3, r3, #30
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}

0800184a <LL_ADC_SetCalibrationFactor>:
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	22b4      	movs	r2, #180	@ 0xb4
 8001858:	589b      	ldr	r3, [r3, r2]
 800185a:	227f      	movs	r2, #127	@ 0x7f
 800185c:	4393      	bics	r3, r2
 800185e:	001a      	movs	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	21b4      	movs	r1, #180	@ 0xb4
 8001868:	505a      	str	r2, [r3, r1]
}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <LL_ADC_GetCalibrationFactor>:
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	22b4      	movs	r2, #180	@ 0xb4
 800187e:	589b      	ldr	r3, [r3, r2]
 8001880:	227f      	movs	r2, #127	@ 0x7f
 8001882:	4013      	ands	r3, r2
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <LL_ADC_Enable>:
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <LL_ADC_Enable+0x20>)
 800189a:	4013      	ands	r3, r2
 800189c:	2201      	movs	r2, #1
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
}
 80018a4:	46c0      	nop			@ (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	7fffffe8 	.word	0x7fffffe8

080018b0 <LL_ADC_Disable>:
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <LL_ADC_Disable+0x20>)
 80018be:	4013      	ands	r3, r2
 80018c0:	2202      	movs	r2, #2
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	609a      	str	r2, [r3, #8]
}
 80018c8:	46c0      	nop			@ (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	7fffffe8 	.word	0x7fffffe8

080018d4 <LL_ADC_IsEnabled>:
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <LL_ADC_IsEnabled+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <LL_ADC_IsEnabled+0x1a>
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <LL_ADC_StartCalibration>:
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a05      	ldr	r2, [pc, #20]	@ (800191c <LL_ADC_StartCalibration+0x24>)
 8001906:	4013      	ands	r3, r2
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	0612      	lsls	r2, r2, #24
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	7fffffe8 	.word	0x7fffffe8

08001920 <LL_ADC_IsCalibrationOnGoing>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	0fdb      	lsrs	r3, r3, #31
 800192e:	07da      	lsls	r2, r3, #31
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	429a      	cmp	r2, r3
 8001936:	d101      	bne.n	800193c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800193c:	2300      	movs	r3, #0
}
 800193e:	0018      	movs	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	b002      	add	sp, #8
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2254      	movs	r2, #84	@ 0x54
 800195c:	5c9b      	ldrb	r3, [r3, r2]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_ADCEx_Calibration_Start+0x1e>
 8001962:	2302      	movs	r3, #2
 8001964:	e0dd      	b.n	8001b22 <HAL_ADCEx_Calibration_Start+0x1da>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2254      	movs	r2, #84	@ 0x54
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800196e:	231f      	movs	r3, #31
 8001970:	18fc      	adds	r4, r7, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fef1 	bl	800175c <ADC_Disable>
 800197a:	0003      	movs	r3, r0
 800197c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	f7ff ffa6 	bl	80018d4 <LL_ADC_IsEnabled>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d000      	beq.n	800198e <HAL_ADCEx_Calibration_Start+0x46>
 800198c:	e0bc      	b.n	8001b08 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	4a66      	ldr	r2, [pc, #408]	@ (8001b2c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001994:	4013      	ands	r3, r2
 8001996:	2202      	movs	r2, #2
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a62      	ldr	r2, [pc, #392]	@ (8001b30 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	495f      	ldr	r1, [pc, #380]	@ (8001b34 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019be:	e02d      	b.n	8001a1c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7ff ff97 	bl	80018f8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019ca:	e014      	b.n	80019f6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3301      	adds	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a58      	ldr	r2, [pc, #352]	@ (8001b38 <HAL_ADCEx_Calibration_Start+0x1f0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d90d      	bls.n	80019f6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019de:	2212      	movs	r2, #18
 80019e0:	4393      	bics	r3, r2
 80019e2:	2210      	movs	r2, #16
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2254      	movs	r2, #84	@ 0x54
 80019ee:	2100      	movs	r1, #0
 80019f0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e095      	b.n	8001b22 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7ff ff90 	bl	8001920 <LL_ADC_IsCalibrationOnGoing>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d1e3      	bne.n	80019cc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff32 	bl	8001872 <LL_ADC_GetCalibrationFactor>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	189b      	adds	r3, r3, r2
 8001a14:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d9ce      	bls.n	80019c0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001a22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a24:	6a38      	ldr	r0, [r7, #32]
 8001a26:	f7fe fb6d 	bl	8000104 <__udivsi3>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff ff2a 	bl	800188c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fef8 	bl	8001832 <LL_ADC_GetClock>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d11b      	bne.n	8001a7e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff fee5 	bl	8001818 <LL_ADC_GetCommonClock>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	23e0      	movs	r3, #224	@ 0xe0
 8001a56:	035b      	lsls	r3, r3, #13
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d310      	bcc.n	8001a7e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	0c9b      	lsrs	r3, r3, #18
 8001a60:	3b03      	subs	r3, #3
 8001a62:	2201      	movs	r2, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8001a70:	e002      	b.n	8001a78 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	0011      	movs	r1, r2
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7ff fedf 	bl	800184a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff ff0d 	bl	80018b0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a96:	f7fe ff41 	bl	800091c <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a9e:	e01b      	b.n	8001ad8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aa0:	f7fe ff3c 	bl	800091c <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d914      	bls.n	8001ad8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f7ff ff0e 	bl	80018d4 <LL_ADC_IsEnabled>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d00d      	beq.n	8001ad8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	2201      	movs	r2, #1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e024      	b.n	8001b22 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fef9 	bl	80018d4 <LL_ADC_IsEnabled>
 8001ae2:	1e03      	subs	r3, r0, #0
 8001ae4:	d1dc      	bne.n	8001aa0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68d9      	ldr	r1, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	2203      	movs	r2, #3
 8001afc:	4393      	bics	r3, r2
 8001afe:	2201      	movs	r2, #1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b06:	e005      	b.n	8001b14 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2254      	movs	r2, #84	@ 0x54
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b1c:	231f      	movs	r3, #31
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b00b      	add	sp, #44	@ 0x2c
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	fffffefd 	.word	0xfffffefd
 8001b30:	00008003 	.word	0x00008003
 8001b34:	ffff7ffc 	.word	0xffff7ffc
 8001b38:	0002f1ff 	.word	0x0002f1ff
 8001b3c:	40012708 	.word	0x40012708

08001b40 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	0002      	movs	r2, r0
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b92:	d809      	bhi.n	8001ba8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	001a      	movs	r2, r3
 8001b9a:	231f      	movs	r3, #31
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_EnableIRQ+0x30>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	4091      	lsls	r1, r2
 8001ba4:	000a      	movs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	0002      	movs	r2, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bc8:	d828      	bhi.n	8001c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bca:	4a2f      	ldr	r2, [pc, #188]	@ (8001c88 <__NVIC_SetPriority+0xd4>)
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	33c0      	adds	r3, #192	@ 0xc0
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	589b      	ldr	r3, [r3, r2]
 8001bda:	1dfa      	adds	r2, r7, #7
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	0011      	movs	r1, r2
 8001be0:	2203      	movs	r2, #3
 8001be2:	400a      	ands	r2, r1
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	21ff      	movs	r1, #255	@ 0xff
 8001be8:	4091      	lsls	r1, r2
 8001bea:	000a      	movs	r2, r1
 8001bec:	43d2      	mvns	r2, r2
 8001bee:	401a      	ands	r2, r3
 8001bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	019b      	lsls	r3, r3, #6
 8001bf6:	22ff      	movs	r2, #255	@ 0xff
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2303      	movs	r3, #3
 8001c02:	4003      	ands	r3, r0
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c08:	481f      	ldr	r0, [pc, #124]	@ (8001c88 <__NVIC_SetPriority+0xd4>)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	430a      	orrs	r2, r1
 8001c14:	33c0      	adds	r3, #192	@ 0xc0
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c1a:	e031      	b.n	8001c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c8c <__NVIC_SetPriority+0xd8>)
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	0019      	movs	r1, r3
 8001c24:	230f      	movs	r3, #15
 8001c26:	400b      	ands	r3, r1
 8001c28:	3b08      	subs	r3, #8
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	1dfa      	adds	r2, r7, #7
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	400a      	ands	r2, r1
 8001c40:	00d2      	lsls	r2, r2, #3
 8001c42:	21ff      	movs	r1, #255	@ 0xff
 8001c44:	4091      	lsls	r1, r2
 8001c46:	000a      	movs	r2, r1
 8001c48:	43d2      	mvns	r2, r2
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	22ff      	movs	r2, #255	@ 0xff
 8001c54:	401a      	ands	r2, r3
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	4003      	ands	r3, r0
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c64:	4809      	ldr	r0, [pc, #36]	@ (8001c8c <__NVIC_SetPriority+0xd8>)
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	001c      	movs	r4, r3
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	4023      	ands	r3, r4
 8001c70:	3b08      	subs	r3, #8
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	430a      	orrs	r2, r1
 8001c76:	3306      	adds	r3, #6
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	18c3      	adds	r3, r0, r3
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	601a      	str	r2, [r3, #0]
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b003      	add	sp, #12
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	045b      	lsls	r3, r3, #17
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d301      	bcc.n	8001ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e010      	b.n	8001cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <SysTick_Config+0x44>)
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	3a01      	subs	r2, #1
 8001cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff ff7c 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <SysTick_Config+0x44>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <SysTick_Config+0x44>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			@ (mov r8, r8)
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	1c02      	adds	r2, r0, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	0002      	movs	r2, r0
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ff33 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ffaf 	bl	8001c90 <SysTick_Config>
 8001d32:	0003      	movs	r3, r0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e147      	b.n	8001fdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4091      	lsls	r1, r2
 8001d56:	000a      	movs	r2, r1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d100      	bne.n	8001d64 <HAL_GPIO_Init+0x28>
 8001d62:	e138      	b.n	8001fd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d005      	beq.n	8001d7c <HAL_GPIO_Init+0x40>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	2201      	movs	r2, #1
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d017      	beq.n	8001e1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d123      	bne.n	8001e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	58d3      	ldr	r3, [r2, r3]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2207      	movs	r2, #7
 8001e38:	4013      	ands	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2107      	movs	r1, #7
 8001e52:	400b      	ands	r3, r1
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	409a      	lsls	r2, r3
 8001e58:	0013      	movs	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	23c0      	movs	r3, #192	@ 0xc0
 8001ea8:	029b      	lsls	r3, r3, #10
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d100      	bne.n	8001eb0 <HAL_GPIO_Init+0x174>
 8001eae:	e092      	b.n	8001fd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001eb0:	4a50      	ldr	r2, [pc, #320]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	589b      	ldr	r3, [r3, r2]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	0013      	movs	r3, r2
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	23a0      	movs	r3, #160	@ 0xa0
 8001ed8:	05db      	lsls	r3, r3, #23
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x1ca>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a45      	ldr	r2, [pc, #276]	@ (8001ff8 <HAL_GPIO_Init+0x2bc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x1c6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a44      	ldr	r2, [pc, #272]	@ (8001ffc <HAL_GPIO_Init+0x2c0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x1c2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a43      	ldr	r2, [pc, #268]	@ (8002000 <HAL_GPIO_Init+0x2c4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x1be>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x1cc>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x1cc>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x1cc>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x1cc>
 8001f06:	2300      	movs	r3, #0
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	00d2      	lsls	r2, r2, #3
 8001f10:	4093      	lsls	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f18:	4936      	ldr	r1, [pc, #216]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3318      	adds	r3, #24
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f26:	4b33      	ldr	r3, [pc, #204]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	035b      	lsls	r3, r3, #13
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f50:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	039b      	lsls	r3, r3, #14
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001f7c:	2384      	movs	r3, #132	@ 0x84
 8001f7e:	58d3      	ldr	r3, [r2, r3]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa0:	4914      	ldr	r1, [pc, #80]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	2284      	movs	r2, #132	@ 0x84
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fa8:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	58d3      	ldr	r3, [r2, r3]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fce:	4909      	ldr	r1, [pc, #36]	@ (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	40da      	lsrs	r2, r3
 8001fe4:	1e13      	subs	r3, r2, #0
 8001fe6:	d000      	beq.n	8001fea <HAL_GPIO_Init+0x2ae>
 8001fe8:	e6b0      	b.n	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000800 	.word	0x50000800
 8002000:	50000c00 	.word	0x50000c00

08002004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800200c:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d11f      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	0013      	movs	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	189b      	adds	r3, r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4912      	ldr	r1, [pc, #72]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002036:	0018      	movs	r0, r3
 8002038:	f7fe f864 	bl	8000104 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002042:	e008      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b01      	subs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e001      	b.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e009      	b.n	800206a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	401a      	ands	r2, r3
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	429a      	cmp	r2, r3
 8002066:	d0ed      	beq.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b004      	add	sp, #16
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	40007000 	.word	0x40007000
 8002078:	fffff9ff 	.word	0xfffff9ff
 800207c:	20000000 	.word	0x20000000
 8002080:	000f4240 	.word	0x000f4240

08002084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e2fe      	b.n	8002694 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x1e>
 80020a0:	e07c      	b.n	800219c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4bc3      	ldr	r3, [pc, #780]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2238      	movs	r2, #56	@ 0x38
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ac:	4bc0      	ldr	r3, [pc, #768]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3e>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4bb9      	ldr	r3, [pc, #740]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	4013      	ands	r3, r2
 80020d2:	d062      	beq.n	800219a <HAL_RCC_OscConfig+0x116>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d15e      	bne.n	800219a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e2d9      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0x78>
 80020ec:	4bb0      	ldr	r3, [pc, #704]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4baf      	ldr	r3, [pc, #700]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	0249      	lsls	r1, r1, #9
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e020      	b.n	800213e <HAL_RCC_OscConfig+0xba>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	23a0      	movs	r3, #160	@ 0xa0
 8002102:	02db      	lsls	r3, r3, #11
 8002104:	429a      	cmp	r2, r3
 8002106:	d10e      	bne.n	8002126 <HAL_RCC_OscConfig+0xa2>
 8002108:	4ba9      	ldr	r3, [pc, #676]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4ba8      	ldr	r3, [pc, #672]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800210e:	2180      	movs	r1, #128	@ 0x80
 8002110:	02c9      	lsls	r1, r1, #11
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4ba6      	ldr	r3, [pc, #664]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4ba5      	ldr	r3, [pc, #660]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800211c:	2180      	movs	r1, #128	@ 0x80
 800211e:	0249      	lsls	r1, r1, #9
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0xba>
 8002126:	4ba2      	ldr	r3, [pc, #648]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4ba1      	ldr	r3, [pc, #644]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800212c:	49a1      	ldr	r1, [pc, #644]	@ (80023b4 <HAL_RCC_OscConfig+0x330>)
 800212e:	400a      	ands	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	4b9f      	ldr	r3, [pc, #636]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b9e      	ldr	r3, [pc, #632]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002138:	499f      	ldr	r1, [pc, #636]	@ (80023b8 <HAL_RCC_OscConfig+0x334>)
 800213a:	400a      	ands	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d014      	beq.n	8002170 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe fbe9 	bl	800091c <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fbe4 	bl	800091c <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	@ 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e298      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4b93      	ldr	r3, [pc, #588]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	4013      	ands	r3, r2
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xcc>
 800216e:	e015      	b.n	800219c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fbd4 	bl	800091c <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217a:	f7fe fbcf 	bl	800091c <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	@ 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e283      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218c:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0xf6>
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2202      	movs	r2, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d100      	bne.n	80021a8 <HAL_RCC_OscConfig+0x124>
 80021a6:	e099      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a8:	4b81      	ldr	r3, [pc, #516]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2238      	movs	r2, #56	@ 0x38
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b2:	4b7f      	ldr	r3, [pc, #508]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x144>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d002      	beq.n	80021ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d135      	bne.n	800223a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ce:	4b78      	ldr	r3, [pc, #480]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x162>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e256      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b72      	ldr	r3, [pc, #456]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a74      	ldr	r2, [pc, #464]	@ (80023bc <HAL_RCC_OscConfig+0x338>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	4b6e      	ldr	r3, [pc, #440]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d112      	bne.n	8002228 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002202:	4b6b      	ldr	r3, [pc, #428]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	@ (80023c0 <HAL_RCC_OscConfig+0x33c>)
 8002208:	4013      	ands	r3, r2
 800220a:	0019      	movs	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	4b67      	ldr	r3, [pc, #412]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	2207      	movs	r2, #7
 800221e:	4013      	ands	r3, r2
 8002220:	4a68      	ldr	r2, [pc, #416]	@ (80023c4 <HAL_RCC_OscConfig+0x340>)
 8002222:	40da      	lsrs	r2, r3
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x344>)
 8002226:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002228:	4b68      	ldr	r3, [pc, #416]	@ (80023cc <HAL_RCC_OscConfig+0x348>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fb19 	bl	8000864 <HAL_InitTick>
 8002232:	1e03      	subs	r3, r0, #0
 8002234:	d051      	beq.n	80022da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e22c      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d030      	beq.n	80022a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002242:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5e      	ldr	r2, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x33c>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	4b57      	ldr	r3, [pc, #348]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002256:	4b56      	ldr	r3, [pc, #344]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b55      	ldr	r3, [pc, #340]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800225c:	2180      	movs	r1, #128	@ 0x80
 800225e:	0049      	lsls	r1, r1, #1
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fb5a 	bl	800091c <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7fe fb55 	bl	800091c <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e209      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4013      	ands	r3, r2
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b48      	ldr	r3, [pc, #288]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a4a      	ldr	r2, [pc, #296]	@ (80023bc <HAL_RCC_OscConfig+0x338>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	021a      	lsls	r2, r3, #8
 800229c:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022a4:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b41      	ldr	r3, [pc, #260]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	4949      	ldr	r1, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x34c>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fb34 	bl	800091c <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fb2f 	bl	800091c <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1e3      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022cc:	4b38      	ldr	r3, [pc, #224]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4013      	ands	r3, r2
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x236>
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2208      	movs	r2, #8
 80022e2:	4013      	ands	r3, r2
 80022e4:	d047      	beq.n	8002376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022e6:	4b32      	ldr	r3, [pc, #200]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2238      	movs	r2, #56	@ 0x38
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b18      	cmp	r3, #24
 80022f0:	d10a      	bne.n	8002308 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022f2:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x2f2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d138      	bne.n	8002376 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e1c5      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d019      	beq.n	8002344 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002312:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002316:	2101      	movs	r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fafe 	bl	800091c <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002326:	f7fe faf9 	bl	800091c <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1ad      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233c:	2202      	movs	r2, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d0f1      	beq.n	8002326 <HAL_RCC_OscConfig+0x2a2>
 8002342:	e018      	b.n	8002376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002344:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002346:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800234a:	2101      	movs	r1, #1
 800234c:	438a      	bics	r2, r1
 800234e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fae4 	bl	800091c <HAL_GetTick>
 8002354:	0003      	movs	r3, r0
 8002356:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235a:	f7fe fadf 	bl	800091c <HAL_GetTick>
 800235e:	0002      	movs	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e193      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800236e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	4013      	ands	r3, r2
 8002374:	d1f1      	bne.n	800235a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x2fe>
 8002380:	e0c6      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2238      	movs	r2, #56	@ 0x38
 8002390:	4013      	ands	r3, r2
 8002392:	2b20      	cmp	r3, #32
 8002394:	d11e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x32c>)
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x31e>
 80023a0:	e0b6      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d000      	beq.n	80023ac <HAL_RCC_OscConfig+0x328>
 80023aa:	e0b1      	b.n	8002510 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e171      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	fffeffff 	.word	0xfffeffff
 80023b8:	fffbffff 	.word	0xfffbffff
 80023bc:	ffff80ff 	.word	0xffff80ff
 80023c0:	ffffc7ff 	.word	0xffffc7ff
 80023c4:	00f42400 	.word	0x00f42400
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004
 80023d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d4:	4bb1      	ldr	r3, [pc, #708]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80023d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_OscConfig+0x360>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x362>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4bac      	ldr	r3, [pc, #688]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ee:	4bab      	ldr	r3, [pc, #684]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	0549      	lsls	r1, r1, #21
 80023f4:	430a      	orrs	r2, r1
 80023f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023f8:	4ba8      	ldr	r3, [pc, #672]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80023fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	055b      	lsls	r3, r3, #21
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002406:	231f      	movs	r3, #31
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240e:	4ba4      	ldr	r3, [pc, #656]	@ (80026a0 <HAL_RCC_OscConfig+0x61c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241a:	4ba1      	ldr	r3, [pc, #644]	@ (80026a0 <HAL_RCC_OscConfig+0x61c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4ba0      	ldr	r3, [pc, #640]	@ (80026a0 <HAL_RCC_OscConfig+0x61c>)
 8002420:	2180      	movs	r1, #128	@ 0x80
 8002422:	0049      	lsls	r1, r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002428:	f7fe fa78 	bl	800091c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fa73 	bl	800091c <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e127      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002444:	4b96      	ldr	r3, [pc, #600]	@ (80026a0 <HAL_RCC_OscConfig+0x61c>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x3e2>
 8002458:	4b90      	ldr	r3, [pc, #576]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800245a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800245c:	4b8f      	ldr	r3, [pc, #572]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800245e:	2101      	movs	r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x41c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x404>
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002470:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002472:	4b8a      	ldr	r3, [pc, #552]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002474:	2104      	movs	r1, #4
 8002476:	430a      	orrs	r2, r1
 8002478:	65da      	str	r2, [r3, #92]	@ 0x5c
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800247c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800247e:	4b87      	ldr	r3, [pc, #540]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x41c>
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800248a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800248c:	4b83      	ldr	r3, [pc, #524]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800248e:	2101      	movs	r1, #1
 8002490:	438a      	bics	r2, r1
 8002492:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002494:	4b81      	ldr	r3, [pc, #516]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002498:	4b80      	ldr	r3, [pc, #512]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d014      	beq.n	80024d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fa38 	bl	800091c <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fa33 	bl	800091c <HAL_GetTick>
 80024b6:	0002      	movs	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	4a79      	ldr	r2, [pc, #484]	@ (80026a4 <HAL_RCC_OscConfig+0x620>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0e6      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	4b75      	ldr	r3, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80024c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x42e>
 80024d0:	e013      	b.n	80024fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fa23 	bl	800091c <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024da:	e009      	b.n	80024f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fa1e 	bl	800091c <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	4a6f      	ldr	r2, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x620>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0d1      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	4b6a      	ldr	r3, [pc, #424]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b65      	ldr	r3, [pc, #404]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002508:	4b64      	ldr	r3, [pc, #400]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800250a:	4967      	ldr	r1, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x624>)
 800250c:	400a      	ands	r2, r1
 800250e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d100      	bne.n	800251a <HAL_RCC_OscConfig+0x496>
 8002518:	e0bb      	b.n	8002692 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251a:	4b60      	ldr	r3, [pc, #384]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	@ 0x38
 8002520:	4013      	ands	r3, r2
 8002522:	2b10      	cmp	r3, #16
 8002524:	d100      	bne.n	8002528 <HAL_RCC_OscConfig+0x4a4>
 8002526:	e07b      	b.n	8002620 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d156      	bne.n	80025de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b59      	ldr	r3, [pc, #356]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002536:	495d      	ldr	r1, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x628>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe f9ee 	bl	800091c <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe f9e9 	bl	800091c <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e09d      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	049b      	lsls	r3, r3, #18
 8002560:	4013      	ands	r3, r2
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a51      	ldr	r2, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x62c>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002590:	431a      	orrs	r2, r3
 8002592:	4b42      	ldr	r3, [pc, #264]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002598:	4b40      	ldr	r3, [pc, #256]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800259e:	2180      	movs	r1, #128	@ 0x80
 80025a0:	0449      	lsls	r1, r1, #17
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025ac:	2180      	movs	r1, #128	@ 0x80
 80025ae:	0549      	lsls	r1, r1, #21
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe f9b2 	bl	800091c <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe f9ad 	bl	800091c <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e061      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d0:	4b32      	ldr	r3, [pc, #200]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	049b      	lsls	r3, r3, #18
 80025d8:	4013      	ands	r3, r2
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x53a>
 80025dc:	e059      	b.n	8002692 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 80025e4:	4931      	ldr	r1, [pc, #196]	@ (80026ac <HAL_RCC_OscConfig+0x628>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe f997 	bl	800091c <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe f992 	bl	800091c <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e046      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002606:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	049b      	lsls	r3, r3, #18
 800260e:	4013      	ands	r3, r2
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 8002618:	4926      	ldr	r1, [pc, #152]	@ (80026b4 <HAL_RCC_OscConfig+0x630>)
 800261a:	400a      	ands	r2, r1
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	e038      	b.n	8002692 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e033      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x618>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2203      	movs	r2, #3
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	429a      	cmp	r2, r3
 800263e:	d126      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2270      	movs	r2, #112	@ 0x70
 8002644:	401a      	ands	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11f      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	23fe      	movs	r3, #254	@ 0xfe
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	23f8      	movs	r3, #248	@ 0xf8
 8002664:	039b      	lsls	r3, r3, #14
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d10e      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	23e0      	movs	r3, #224	@ 0xe0
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	0f5b      	lsrs	r3, r3, #29
 8002684:	075a      	lsls	r2, r3, #29
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b008      	add	sp, #32
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	00001388 	.word	0x00001388
 80026a8:	efffffff 	.word	0xefffffff
 80026ac:	feffffff 	.word	0xfeffffff
 80026b0:	11c1808c 	.word	0x11c1808c
 80026b4:	eefefffc 	.word	0xeefefffc

080026b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0e9      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026cc:	4b76      	ldr	r3, [pc, #472]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2207      	movs	r2, #7
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d91e      	bls.n	8002718 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b73      	ldr	r3, [pc, #460]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2207      	movs	r2, #7
 80026e0:	4393      	bics	r3, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026ec:	f7fe f916 	bl	800091c <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026f4:	e009      	b.n	800270a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f6:	f7fe f911 	bl	800091c <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	4a6a      	ldr	r2, [pc, #424]	@ (80028ac <HAL_RCC_ClockConfig+0x1f4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0ca      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800270a:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d015      	beq.n	800274e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d006      	beq.n	800273a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800272c:	4b60      	ldr	r3, [pc, #384]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002732:	21e0      	movs	r1, #224	@ 0xe0
 8002734:	01c9      	lsls	r1, r1, #7
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273a:	4b5d      	ldr	r3, [pc, #372]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a5d      	ldr	r2, [pc, #372]	@ (80028b4 <HAL_RCC_ClockConfig+0x1fc>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800274a:	430a      	orrs	r2, r1
 800274c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d057      	beq.n	8002808 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002760:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	4013      	ands	r3, r2
 800276a:	d12b      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e097      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d107      	bne.n	8002788 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002778:	4b4d      	ldr	r3, [pc, #308]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	4013      	ands	r3, r2
 8002782:	d11f      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e08b      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	4b47      	ldr	r3, [pc, #284]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4013      	ands	r3, r2
 800279a:	d113      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e07f      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a8:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e074      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e06d      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c4:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2207      	movs	r2, #7
 80027ca:	4393      	bics	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7fe f8a0 	bl	800091c <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e0:	e009      	b.n	80027f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e2:	f7fe f89b 	bl	800091c <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4a2f      	ldr	r2, [pc, #188]	@ (80028ac <HAL_RCC_ClockConfig+0x1f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e054      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b2e      	ldr	r3, [pc, #184]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2238      	movs	r2, #56	@ 0x38
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	429a      	cmp	r2, r3
 8002806:	d1ec      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002808:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d21e      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2207      	movs	r2, #7
 800281c:	4393      	bics	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002828:	f7fe f878 	bl	800091c <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002830:	e009      	b.n	8002846 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002832:	f7fe f873 	bl	800091c <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_RCC_ClockConfig+0x1f4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e02c      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2204      	movs	r2, #4
 800285a:	4013      	ands	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800285e:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a15      	ldr	r2, [pc, #84]	@ (80028b8 <HAL_RCC_ClockConfig+0x200>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002872:	f000 f829 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002876:	0001      	movs	r1, r0
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_RCC_ClockConfig+0x1f8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	220f      	movs	r2, #15
 8002880:	401a      	ands	r2, r3
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_RCC_ClockConfig+0x204>)
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	58d3      	ldr	r3, [r2, r3]
 8002888:	221f      	movs	r2, #31
 800288a:	4013      	ands	r3, r2
 800288c:	000a      	movs	r2, r1
 800288e:	40da      	lsrs	r2, r3
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_ClockConfig+0x208>)
 8002892:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCC_ClockConfig+0x20c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f7fd ffe3 	bl	8000864 <HAL_InitTick>
 800289e:	0003      	movs	r3, r0
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40022000 	.word	0x40022000
 80028ac:	00001388 	.word	0x00001388
 80028b0:	40021000 	.word	0x40021000
 80028b4:	fffff0ff 	.word	0xfffff0ff
 80028b8:	ffff8fff 	.word	0xffff8fff
 80028bc:	08003d64 	.word	0x08003d64
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	4b3c      	ldr	r3, [pc, #240]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2238      	movs	r2, #56	@ 0x38
 80028d4:	4013      	ands	r3, r2
 80028d6:	d10f      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028d8:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0adb      	lsrs	r3, r3, #11
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	4835      	ldr	r0, [pc, #212]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ee:	f7fd fc09 	bl	8000104 <__udivsi3>
 80028f2:	0003      	movs	r3, r0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	e05d      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2238      	movs	r2, #56	@ 0x38
 80028fe:	4013      	ands	r3, r2
 8002900:	2b08      	cmp	r3, #8
 8002902:	d102      	bne.n	800290a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	e054      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2238      	movs	r2, #56	@ 0x38
 8002910:	4013      	ands	r3, r2
 8002912:	2b10      	cmp	r3, #16
 8002914:	d138      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002916:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2203      	movs	r2, #3
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	2207      	movs	r2, #7
 8002928:	4013      	ands	r3, r2
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d10d      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	4824      	ldr	r0, [pc, #144]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002938:	f7fd fbe4 	bl	8000104 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	0019      	movs	r1, r3
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	227f      	movs	r2, #127	@ 0x7f
 8002948:	4013      	ands	r3, r2
 800294a:	434b      	muls	r3, r1
 800294c:	617b      	str	r3, [r7, #20]
        break;
 800294e:	e00d      	b.n	800296c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	481c      	ldr	r0, [pc, #112]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002954:	f7fd fbd6 	bl	8000104 <__udivsi3>
 8002958:	0003      	movs	r3, r0
 800295a:	0019      	movs	r1, r3
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	227f      	movs	r2, #127	@ 0x7f
 8002964:	4013      	ands	r3, r2
 8002966:	434b      	muls	r3, r1
 8002968:	617b      	str	r3, [r7, #20]
        break;
 800296a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0f5b      	lsrs	r3, r3, #29
 8002972:	2207      	movs	r2, #7
 8002974:	4013      	ands	r3, r2
 8002976:	3301      	adds	r3, #1
 8002978:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6978      	ldr	r0, [r7, #20]
 800297e:	f7fd fbc1 	bl	8000104 <__udivsi3>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e015      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002988:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2238      	movs	r2, #56	@ 0x38
 800298e:	4013      	ands	r3, r2
 8002990:	2b20      	cmp	r3, #32
 8002992:	d103      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800299c:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2238      	movs	r2, #56	@ 0x38
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b18      	cmp	r3, #24
 80029a6:	d103      	bne.n	80029b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029a8:	23fa      	movs	r3, #250	@ 0xfa
 80029aa:	01db      	lsls	r3, r3, #7
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e001      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029b4:	693b      	ldr	r3, [r7, #16]
}
 80029b6:	0018      	movs	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b006      	add	sp, #24
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e04a      	b.n	8002a74 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	223d      	movs	r2, #61	@ 0x3d
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223c      	movs	r2, #60	@ 0x3c
 80029ee:	2100      	movs	r1, #0
 80029f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7fd fe83 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223d      	movs	r2, #61	@ 0x3d
 80029fe:	2102      	movs	r1, #2
 8002a00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	f000 fcd9 	bl	80033c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2248      	movs	r2, #72	@ 0x48
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223e      	movs	r2, #62	@ 0x3e
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	223f      	movs	r2, #63	@ 0x3f
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2241      	movs	r2, #65	@ 0x41
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2242      	movs	r2, #66	@ 0x42
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2243      	movs	r2, #67	@ 0x43
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2244      	movs	r2, #68	@ 0x44
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2245      	movs	r2, #69	@ 0x45
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2246      	movs	r2, #70	@ 0x46
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2247      	movs	r2, #71	@ 0x47
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	@ 0x3d
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	223d      	movs	r2, #61	@ 0x3d
 8002a88:	5c9b      	ldrb	r3, [r3, r2]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e042      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	223d      	movs	r2, #61	@ 0x3d
 8002a98:	2102      	movs	r1, #2
 8002a9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_TIM_Base_Start_IT+0xa8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d009      	beq.n	8002ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_TIM_Base_Start_IT+0xac>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_TIM_Base_Start_IT+0x5a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	@ (8002b2c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d116      	bne.n	8002b04 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b06      	cmp	r3, #6
 8002ae6:	d016      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x9a>
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d011      	beq.n	8002b16 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	e008      	b.n	8002b16 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e000      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b16:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	00010007 	.word	0x00010007

08002b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e04a      	b.n	8002bdc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223d      	movs	r2, #61	@ 0x3d
 8002b4a:	5c9b      	ldrb	r3, [r3, r2]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	223c      	movs	r2, #60	@ 0x3c
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f841 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223d      	movs	r2, #61	@ 0x3d
 8002b66:	2102      	movs	r1, #2
 8002b68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	0019      	movs	r1, r3
 8002b74:	0010      	movs	r0, r2
 8002b76:	f000 fc25 	bl	80033c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2248      	movs	r2, #72	@ 0x48
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223e      	movs	r2, #62	@ 0x3e
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	223f      	movs	r2, #63	@ 0x3f
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2240      	movs	r2, #64	@ 0x40
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2241      	movs	r2, #65	@ 0x41
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2242      	movs	r2, #66	@ 0x42
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2243      	movs	r2, #67	@ 0x43
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2244      	movs	r2, #68	@ 0x44
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2245      	movs	r2, #69	@ 0x45
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2246      	movs	r2, #70	@ 0x46
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2247      	movs	r2, #71	@ 0x47
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223d      	movs	r2, #61	@ 0x3d
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x22>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	223e      	movs	r2, #62	@ 0x3e
 8002c08:	5c9b      	ldrb	r3, [r3, r2]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	1e5a      	subs	r2, r3, #1
 8002c10:	4193      	sbcs	r3, r2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e037      	b.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d108      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x3a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223f      	movs	r2, #63	@ 0x3f
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	4193      	sbcs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e02b      	b.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d108      	bne.n	8002c46 <HAL_TIM_PWM_Start+0x52>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	4193      	sbcs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e01f      	b.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d108      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2241      	movs	r2, #65	@ 0x41
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	4193      	sbcs	r3, r2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d108      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x82>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2242      	movs	r2, #66	@ 0x42
 8002c68:	5c9b      	ldrb	r3, [r3, r2]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	4193      	sbcs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2243      	movs	r2, #67	@ 0x43
 8002c7a:	5c9b      	ldrb	r3, [r3, r2]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	4193      	sbcs	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e08b      	b.n	8002da6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	223e      	movs	r2, #62	@ 0x3e
 8002c98:	2102      	movs	r1, #2
 8002c9a:	5499      	strb	r1, [r3, r2]
 8002c9c:	e023      	b.n	8002ce6 <HAL_TIM_PWM_Start+0xf2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0xba>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223f      	movs	r2, #63	@ 0x3f
 8002ca8:	2102      	movs	r1, #2
 8002caa:	5499      	strb	r1, [r3, r2]
 8002cac:	e01b      	b.n	8002ce6 <HAL_TIM_PWM_Start+0xf2>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xca>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2240      	movs	r2, #64	@ 0x40
 8002cb8:	2102      	movs	r1, #2
 8002cba:	5499      	strb	r1, [r3, r2]
 8002cbc:	e013      	b.n	8002ce6 <HAL_TIM_PWM_Start+0xf2>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_PWM_Start+0xda>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2241      	movs	r2, #65	@ 0x41
 8002cc8:	2102      	movs	r1, #2
 8002cca:	5499      	strb	r1, [r3, r2]
 8002ccc:	e00b      	b.n	8002ce6 <HAL_TIM_PWM_Start+0xf2>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_PWM_Start+0xea>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2242      	movs	r2, #66	@ 0x42
 8002cd8:	2102      	movs	r1, #2
 8002cda:	5499      	strb	r1, [r3, r2]
 8002cdc:	e003      	b.n	8002ce6 <HAL_TIM_PWM_Start+0xf2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2243      	movs	r2, #67	@ 0x43
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6839      	ldr	r1, [r7, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 ff56 	bl	8003ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8002db0 <HAL_TIM_PWM_Start+0x1bc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x128>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <HAL_TIM_PWM_Start+0x1c0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x128>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002db8 <HAL_TIM_PWM_Start+0x1c4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_TIM_PWM_Start+0x128>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a29      	ldr	r2, [pc, #164]	@ (8002dbc <HAL_TIM_PWM_Start+0x1c8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIM_PWM_Start+0x12c>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_PWM_Start+0x12e>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2180      	movs	r1, #128	@ 0x80
 8002d32:	0209      	lsls	r1, r1, #8
 8002d34:	430a      	orrs	r2, r1
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_TIM_PWM_Start+0x1bc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00f      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x16e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d009      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x16e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_TIM_PWM_Start+0x1cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x16e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a15      	ldr	r2, [pc, #84]	@ (8002db4 <HAL_TIM_PWM_Start+0x1c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d116      	bne.n	8002d90 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a16      	ldr	r2, [pc, #88]	@ (8002dc4 <HAL_TIM_PWM_Start+0x1d0>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d016      	beq.n	8002da2 <HAL_TIM_PWM_Start+0x1ae>
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d011      	beq.n	8002da2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	e008      	b.n	8002da2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e000      	b.n	8002da4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400
 8002dbc:	40014800 	.word	0x40014800
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	00010007 	.word	0x00010007

08002dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2202      	movs	r2, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d021      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	d01d      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4252      	negs	r2, r2
 8002df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2203      	movs	r2, #3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 fac0 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e007      	b.n	8002e26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fab3 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fabf 	bl	80033a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	4013      	ands	r3, r2
 8002e32:	d022      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2204      	movs	r2, #4
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d01e      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2205      	movs	r2, #5
 8002e42:	4252      	negs	r2, r2
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	23c0      	movs	r3, #192	@ 0xc0
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4013      	ands	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fa99 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 8002e62:	e007      	b.n	8002e74 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	0018      	movs	r0, r3
 8002e68:	f000 fa8c 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 fa98 	bl	80033a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d021      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2208      	movs	r2, #8
 8002e86:	4013      	ands	r3, r2
 8002e88:	d01d      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2209      	movs	r2, #9
 8002e90:	4252      	negs	r2, r2
 8002e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2204      	movs	r2, #4
 8002e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 fa73 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 8002eae:	e007      	b.n	8002ec0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fa66 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fa72 	bl	80033a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d01e      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2211      	movs	r2, #17
 8002edc:	4252      	negs	r2, r2
 8002ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	23c0      	movs	r3, #192	@ 0xc0
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fa4c 	bl	8003394 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e007      	b.n	8002f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 fa3f 	bl	8003384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fa4b 	bl	80033a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2201      	movs	r2, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00c      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d008      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fd fadf 	bl	80004f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d104      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	019b      	lsls	r3, r3, #6
 8002f44:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f46:	d00b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2280      	movs	r2, #128	@ 0x80
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1e      	ldr	r2, [pc, #120]	@ (8002fd0 <HAL_TIM_IRQHandler+0x208>)
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 feba 	bl	8003cd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a17      	ldr	r2, [pc, #92]	@ (8002fd4 <HAL_TIM_IRQHandler+0x20c>)
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 feb1 	bl	8003ce4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2240      	movs	r2, #64	@ 0x40
 8002f86:	4013      	ands	r3, r2
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d008      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2241      	movs	r2, #65	@ 0x41
 8002f98:	4252      	negs	r2, r2
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fa08 	bl	80033b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d00c      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d008      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2221      	movs	r2, #33	@ 0x21
 8002fba:	4252      	negs	r2, r2
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fe7f 	bl	8003cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	ffffdf7f 	.word	0xffffdf7f
 8002fd4:	fffffeff 	.word	0xfffffeff

08002fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2317      	movs	r3, #23
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	223c      	movs	r2, #60	@ 0x3c
 8002ff0:	5c9b      	ldrb	r3, [r3, r2]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0e5      	b.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	223c      	movs	r2, #60	@ 0x3c
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b14      	cmp	r3, #20
 8003006:	d900      	bls.n	800300a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003008:	e0d1      	b.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	009a      	lsls	r2, r3, #2
 800300e:	4b70      	ldr	r3, [pc, #448]	@ (80031d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fa5e 	bl	80034e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2108      	movs	r1, #8
 8003030:	430a      	orrs	r2, r1
 8003032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2104      	movs	r1, #4
 8003040:	438a      	bics	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6999      	ldr	r1, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	619a      	str	r2, [r3, #24]
      break;
 8003056:	e0af      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f000 fac7 	bl	80035f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	0109      	lsls	r1, r1, #4
 8003074:	430a      	orrs	r2, r1
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4954      	ldr	r1, [pc, #336]	@ (80031d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003084:	400a      	ands	r2, r1
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e08c      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	0011      	movs	r1, r2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 fb28 	bl	80036fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2108      	movs	r1, #8
 80030b8:	430a      	orrs	r2, r1
 80030ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2104      	movs	r1, #4
 80030c8:	438a      	bics	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69d9      	ldr	r1, [r3, #28]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	61da      	str	r2, [r3, #28]
      break;
 80030de:	e06b      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fb8f 	bl	800380c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	0109      	lsls	r1, r1, #4
 80030fc:	430a      	orrs	r2, r1
 80030fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4932      	ldr	r1, [pc, #200]	@ (80031d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800310c:	400a      	ands	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69d9      	ldr	r1, [r3, #28]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      break;
 8003124:	e048      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fbd6 	bl	80038e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2108      	movs	r1, #8
 8003140:	430a      	orrs	r2, r1
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2104      	movs	r1, #4
 8003150:	438a      	bics	r2, r1
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003166:	e027      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fc15 	bl	80039a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0109      	lsls	r1, r1, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4910      	ldr	r1, [pc, #64]	@ (80031d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003194:	400a      	ands	r2, r1
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031ac:	e004      	b.n	80031b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80031ae:	2317      	movs	r3, #23
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
      break;
 80031b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	223c      	movs	r2, #60	@ 0x3c
 80031bc:	2100      	movs	r1, #0
 80031be:	5499      	strb	r1, [r3, r2]

  return status;
 80031c0:	2317      	movs	r3, #23
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	781b      	ldrb	r3, [r3, #0]
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b006      	add	sp, #24
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	08003da4 	.word	0x08003da4
 80031d4:	fffffbff 	.word	0xfffffbff

080031d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	230f      	movs	r3, #15
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	223c      	movs	r2, #60	@ 0x3c
 80031ee:	5c9b      	ldrb	r3, [r3, r2]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIM_ConfigClockSource+0x20>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0bc      	b.n	8003372 <HAL_TIM_ConfigClockSource+0x19a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	223c      	movs	r2, #60	@ 0x3c
 80031fc:	2101      	movs	r1, #1
 80031fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223d      	movs	r2, #61	@ 0x3d
 8003204:	2102      	movs	r1, #2
 8003206:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4a5a      	ldr	r2, [pc, #360]	@ (800337c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4a59      	ldr	r2, [pc, #356]	@ (8003380 <HAL_TIM_ConfigClockSource+0x1a8>)
 800321c:	4013      	ands	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2280      	movs	r2, #128	@ 0x80
 800322e:	0192      	lsls	r2, r2, #6
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xde>
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	0192      	lsls	r2, r2, #6
 8003238:	4293      	cmp	r3, r2
 800323a:	d900      	bls.n	800323e <HAL_TIM_ConfigClockSource+0x66>
 800323c:	e088      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 800323e:	2280      	movs	r2, #128	@ 0x80
 8003240:	0152      	lsls	r2, r2, #5
 8003242:	4293      	cmp	r3, r2
 8003244:	d100      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x70>
 8003246:	e088      	b.n	800335a <HAL_TIM_ConfigClockSource+0x182>
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	0152      	lsls	r2, r2, #5
 800324c:	4293      	cmp	r3, r2
 800324e:	d900      	bls.n	8003252 <HAL_TIM_ConfigClockSource+0x7a>
 8003250:	e07e      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 8003252:	2b70      	cmp	r3, #112	@ 0x70
 8003254:	d018      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xb0>
 8003256:	d900      	bls.n	800325a <HAL_TIM_ConfigClockSource+0x82>
 8003258:	e07a      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 800325a:	2b60      	cmp	r3, #96	@ 0x60
 800325c:	d04f      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x126>
 800325e:	d900      	bls.n	8003262 <HAL_TIM_ConfigClockSource+0x8a>
 8003260:	e076      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 8003262:	2b50      	cmp	r3, #80	@ 0x50
 8003264:	d03b      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x106>
 8003266:	d900      	bls.n	800326a <HAL_TIM_ConfigClockSource+0x92>
 8003268:	e072      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 800326a:	2b40      	cmp	r3, #64	@ 0x40
 800326c:	d057      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x146>
 800326e:	d900      	bls.n	8003272 <HAL_TIM_ConfigClockSource+0x9a>
 8003270:	e06e      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 8003272:	2b30      	cmp	r3, #48	@ 0x30
 8003274:	d063      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x166>
 8003276:	d86b      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d060      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x166>
 800327c:	d868      	bhi.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05d      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x166>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d05b      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x166>
 8003286:	e063      	b.n	8003350 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	f000 fc62 	bl	8003b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2277      	movs	r2, #119	@ 0x77
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
      break;
 80032b4:	e052      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c6:	f000 fc4b 	bl	8003b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2180      	movs	r1, #128	@ 0x80
 80032d6:	01c9      	lsls	r1, r1, #7
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
      break;
 80032dc:	e03e      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	001a      	movs	r2, r3
 80032ec:	f000 fbbc 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2150      	movs	r1, #80	@ 0x50
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fc16 	bl	8003b28 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e02e      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800330a:	001a      	movs	r2, r3
 800330c:	f000 fbda 	bl	8003ac4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2160      	movs	r1, #96	@ 0x60
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fc06 	bl	8003b28 <TIM_ITRx_SetConfig>
      break;
 800331c:	e01e      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	001a      	movs	r2, r3
 800332c:	f000 fb9c 	bl	8003a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fbf6 	bl	8003b28 <TIM_ITRx_SetConfig>
      break;
 800333c:	e00e      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f000 fbed 	bl	8003b28 <TIM_ITRx_SetConfig>
      break;
 800334e:	e005      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003350:	230f      	movs	r3, #15
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
      break;
 8003358:	e000      	b.n	800335c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800335a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223d      	movs	r2, #61	@ 0x3d
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	@ 0x3c
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

  return status;
 800336c:	230f      	movs	r3, #15
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	781b      	ldrb	r3, [r3, #0]
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	ffceff88 	.word	0xffceff88
 8003380:	ffff00ff 	.word	0xffff00ff

08003384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ac:	46c0      	nop			@ (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b002      	add	sp, #8
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <TIM_Base_SetConfig+0x100>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d008      	beq.n	80033ee <TIM_Base_SetConfig+0x2a>
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x2a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a37      	ldr	r2, [pc, #220]	@ (80034c8 <TIM_Base_SetConfig+0x104>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2270      	movs	r2, #112	@ 0x70
 80033f2:	4393      	bics	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a30      	ldr	r2, [pc, #192]	@ (80034c4 <TIM_Base_SetConfig+0x100>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	05db      	lsls	r3, r3, #23
 800340e:	429a      	cmp	r2, r3
 8003410:	d013      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	@ (80034c8 <TIM_Base_SetConfig+0x104>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	@ (80034cc <TIM_Base_SetConfig+0x108>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	@ (80034d0 <TIM_Base_SetConfig+0x10c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <TIM_Base_SetConfig+0x110>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_Base_SetConfig+0x76>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <TIM_Base_SetConfig+0x114>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <TIM_Base_SetConfig+0x118>)
 800343e:	4013      	ands	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	4393      	bics	r3, r2
 8003452:	001a      	movs	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a13      	ldr	r2, [pc, #76]	@ (80034c4 <TIM_Base_SetConfig+0x100>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0xce>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <TIM_Base_SetConfig+0x10c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0xce>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <TIM_Base_SetConfig+0x110>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0xce>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <TIM_Base_SetConfig+0x114>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d103      	bne.n	800349a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2201      	movs	r2, #1
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d106      	bne.n	80034ba <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2201      	movs	r2, #1
 80034b2:	4393      	bics	r3, r2
 80034b4:	001a      	movs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	611a      	str	r2, [r3, #16]
  }
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40002000 	.word	0x40002000
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40014400 	.word	0x40014400
 80034d8:	40014800 	.word	0x40014800
 80034dc:	fffffcff 	.word	0xfffffcff

080034e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	2201      	movs	r2, #1
 80034f6:	4393      	bics	r3, r2
 80034f8:	001a      	movs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a32      	ldr	r2, [pc, #200]	@ (80035d8 <TIM_OC1_SetConfig+0xf8>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2203      	movs	r2, #3
 8003516:	4393      	bics	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2202      	movs	r2, #2
 8003528:	4393      	bics	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a28      	ldr	r2, [pc, #160]	@ (80035dc <TIM_OC1_SetConfig+0xfc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_OC1_SetConfig+0x76>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <TIM_OC1_SetConfig+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_OC1_SetConfig+0x76>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <TIM_OC1_SetConfig+0x104>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC1_SetConfig+0x76>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a25      	ldr	r2, [pc, #148]	@ (80035e8 <TIM_OC1_SetConfig+0x108>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2208      	movs	r2, #8
 800355a:	4393      	bics	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2204      	movs	r2, #4
 800356c:	4393      	bics	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <TIM_OC1_SetConfig+0xfc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_OC1_SetConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <TIM_OC1_SetConfig+0x100>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_OC1_SetConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <TIM_OC1_SetConfig+0x104>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC1_SetConfig+0xb0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <TIM_OC1_SetConfig+0x108>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <TIM_OC1_SetConfig+0x10c>)
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4a15      	ldr	r2, [pc, #84]	@ (80035f0 <TIM_OC1_SetConfig+0x110>)
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	fffeff8f 	.word	0xfffeff8f
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400
 80035e8:	40014800 	.word	0x40014800
 80035ec:	fffffeff 	.word	0xfffffeff
 80035f0:	fffffdff 	.word	0xfffffdff

080035f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	2210      	movs	r2, #16
 800360a:	4393      	bics	r3, r2
 800360c:	001a      	movs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a2e      	ldr	r2, [pc, #184]	@ (80036dc <TIM_OC2_SetConfig+0xe8>)
 8003622:	4013      	ands	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a2d      	ldr	r2, [pc, #180]	@ (80036e0 <TIM_OC2_SetConfig+0xec>)
 800362a:	4013      	ands	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2220      	movs	r2, #32
 800363e:	4393      	bics	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <TIM_OC2_SetConfig+0xf0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10d      	bne.n	8003672 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2280      	movs	r2, #128	@ 0x80
 800365a:	4393      	bics	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2240      	movs	r2, #64	@ 0x40
 800366e:	4393      	bics	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <TIM_OC2_SetConfig+0xf0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_OC2_SetConfig+0x9e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <TIM_OC2_SetConfig+0xf4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_OC2_SetConfig+0x9e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <TIM_OC2_SetConfig+0xf8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC2_SetConfig+0x9e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <TIM_OC2_SetConfig+0xfc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d113      	bne.n	80036ba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <TIM_OC2_SetConfig+0x100>)
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <TIM_OC2_SetConfig+0x104>)
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b006      	add	sp, #24
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	feff8fff 	.word	0xfeff8fff
 80036e0:	fffffcff 	.word	0xfffffcff
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800
 80036f4:	fffffbff 	.word	0xfffffbff
 80036f8:	fffff7ff 	.word	0xfffff7ff

080036fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a33      	ldr	r2, [pc, #204]	@ (80037e0 <TIM_OC3_SetConfig+0xe4>)
 8003712:	401a      	ands	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a2f      	ldr	r2, [pc, #188]	@ (80037e4 <TIM_OC3_SetConfig+0xe8>)
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2203      	movs	r2, #3
 8003730:	4393      	bics	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <TIM_OC3_SetConfig+0xec>)
 8003742:	4013      	ands	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a25      	ldr	r2, [pc, #148]	@ (80037ec <TIM_OC3_SetConfig+0xf0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10d      	bne.n	8003776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4a24      	ldr	r2, [pc, #144]	@ (80037f0 <TIM_OC3_SetConfig+0xf4>)
 800375e:	4013      	ands	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	4a20      	ldr	r2, [pc, #128]	@ (80037f4 <TIM_OC3_SetConfig+0xf8>)
 8003772:	4013      	ands	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1c      	ldr	r2, [pc, #112]	@ (80037ec <TIM_OC3_SetConfig+0xf0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00b      	beq.n	8003796 <TIM_OC3_SetConfig+0x9a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <TIM_OC3_SetConfig+0xfc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <TIM_OC3_SetConfig+0x9a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <TIM_OC3_SetConfig+0x100>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC3_SetConfig+0x9a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a1b      	ldr	r2, [pc, #108]	@ (8003800 <TIM_OC3_SetConfig+0x104>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <TIM_OC3_SetConfig+0x108>)
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <TIM_OC3_SetConfig+0x10c>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	46c0      	nop			@ (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b006      	add	sp, #24
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fffffeff 	.word	0xfffffeff
 80037e4:	fffeff8f 	.word	0xfffeff8f
 80037e8:	fffffdff 	.word	0xfffffdff
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	fffff7ff 	.word	0xfffff7ff
 80037f4:	fffffbff 	.word	0xfffffbff
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800
 8003804:	ffffefff 	.word	0xffffefff
 8003808:	ffffdfff 	.word	0xffffdfff

0800380c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a26      	ldr	r2, [pc, #152]	@ (80038bc <TIM_OC4_SetConfig+0xb0>)
 8003822:	401a      	ands	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <TIM_OC4_SetConfig+0xb4>)
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a21      	ldr	r2, [pc, #132]	@ (80038c4 <TIM_OC4_SetConfig+0xb8>)
 8003840:	4013      	ands	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <TIM_OC4_SetConfig+0xbc>)
 8003854:	4013      	ands	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	031b      	lsls	r3, r3, #12
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <TIM_OC4_SetConfig+0xc0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_OC4_SetConfig+0x78>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <TIM_OC4_SetConfig+0xc4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_OC4_SetConfig+0x78>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <TIM_OC4_SetConfig+0xc8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC4_SetConfig+0x78>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <TIM_OC4_SetConfig+0xcc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <TIM_OC4_SetConfig+0xd0>)
 8003888:	4013      	ands	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b006      	add	sp, #24
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	ffffefff 	.word	0xffffefff
 80038c0:	feff8fff 	.word	0xfeff8fff
 80038c4:	fffffcff 	.word	0xfffffcff
 80038c8:	ffffdfff 	.word	0xffffdfff
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40014400 	.word	0x40014400
 80038d8:	40014800 	.word	0x40014800
 80038dc:	ffffbfff 	.word	0xffffbfff

080038e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4a23      	ldr	r2, [pc, #140]	@ (8003984 <TIM_OC5_SetConfig+0xa4>)
 80038f6:	401a      	ands	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <TIM_OC5_SetConfig+0xa8>)
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <TIM_OC5_SetConfig+0xac>)
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a17      	ldr	r2, [pc, #92]	@ (8003990 <TIM_OC5_SetConfig+0xb0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC5_SetConfig+0x6e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a16      	ldr	r2, [pc, #88]	@ (8003994 <TIM_OC5_SetConfig+0xb4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC5_SetConfig+0x6e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a15      	ldr	r2, [pc, #84]	@ (8003998 <TIM_OC5_SetConfig+0xb8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC5_SetConfig+0x6e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a14      	ldr	r2, [pc, #80]	@ (800399c <TIM_OC5_SetConfig+0xbc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d109      	bne.n	8003962 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <TIM_OC5_SetConfig+0xa4>)
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b006      	add	sp, #24
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffeffff 	.word	0xfffeffff
 8003988:	fffeff8f 	.word	0xfffeff8f
 800398c:	fffdffff 	.word	0xfffdffff
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40014000 	.word	0x40014000
 8003998:	40014400 	.word	0x40014400
 800399c:	40014800 	.word	0x40014800

080039a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a24      	ldr	r2, [pc, #144]	@ (8003a48 <TIM_OC6_SetConfig+0xa8>)
 80039b6:	401a      	ands	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a20      	ldr	r2, [pc, #128]	@ (8003a4c <TIM_OC6_SetConfig+0xac>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4a1c      	ldr	r2, [pc, #112]	@ (8003a50 <TIM_OC6_SetConfig+0xb0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	051b      	lsls	r3, r3, #20
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <TIM_OC6_SetConfig+0xb4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_OC6_SetConfig+0x70>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <TIM_OC6_SetConfig+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_OC6_SetConfig+0x70>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a16      	ldr	r2, [pc, #88]	@ (8003a5c <TIM_OC6_SetConfig+0xbc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_OC6_SetConfig+0x70>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <TIM_OC6_SetConfig+0xc0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d109      	bne.n	8003a24 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4a14      	ldr	r2, [pc, #80]	@ (8003a64 <TIM_OC6_SetConfig+0xc4>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b006      	add	sp, #24
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	ffefffff 	.word	0xffefffff
 8003a4c:	feff8fff 	.word	0xfeff8fff
 8003a50:	ffdfffff 	.word	0xffdfffff
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800
 8003a64:	fffbffff 	.word	0xfffbffff

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4393      	bics	r3, r2
 8003a82:	001a      	movs	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	22f0      	movs	r2, #240	@ 0xf0
 8003a92:	4393      	bics	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	220a      	movs	r2, #10
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b006      	add	sp, #24
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	2210      	movs	r2, #16
 8003adc:	4393      	bics	r3, r2
 8003ade:	001a      	movs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <TIM_TI2_ConfigInputStage+0x60>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	22a0      	movs	r2, #160	@ 0xa0
 8003b00:	4393      	bics	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b006      	add	sp, #24
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	ffff0fff 	.word	0xffff0fff

08003b28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <TIM_ITRx_SetConfig+0x34>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	2207      	movs	r2, #7
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	609a      	str	r2, [r3, #8]
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	ffcfff8f 	.word	0xffcfff8f

08003b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <TIM_ETR_SetConfig+0x3c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	609a      	str	r2, [r3, #8]
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b006      	add	sp, #24
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	ffff00ff 	.word	0xffff00ff

08003ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	221f      	movs	r2, #31
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	0013      	movs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	43d2      	mvns	r2, r2
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	211f      	movs	r1, #31
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4099      	lsls	r1, r3
 8003bd6:	000b      	movs	r3, r1
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b006      	add	sp, #24
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	223c      	movs	r2, #60	@ 0x3c
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e055      	b.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	223c      	movs	r2, #60	@ 0x3c
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	223d      	movs	r2, #61	@ 0x3d
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2270      	movs	r2, #112	@ 0x70
 8003c40:	4393      	bics	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	@ (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00f      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d009      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a11      	ldr	r2, [pc, #68]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10c      	bne.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	4393      	bics	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	223d      	movs	r2, #61	@ 0x3d
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	223c      	movs	r2, #60	@ 0x3c
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	0018      	movs	r0, r3
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	ff0fffff 	.word	0xff0fffff
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40014000 	.word	0x40014000

08003cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cec:	46c0      	nop			@ (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <memset>:
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	1882      	adds	r2, r0, r2
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <memset+0xa>
 8003cfc:	4770      	bx	lr
 8003cfe:	7019      	strb	r1, [r3, #0]
 8003d00:	3301      	adds	r3, #1
 8003d02:	e7f9      	b.n	8003cf8 <memset+0x4>

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	2600      	movs	r6, #0
 8003d08:	4c0c      	ldr	r4, [pc, #48]	@ (8003d3c <__libc_init_array+0x38>)
 8003d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d40 <__libc_init_array+0x3c>)
 8003d0c:	1b64      	subs	r4, r4, r5
 8003d0e:	10a4      	asrs	r4, r4, #2
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	2600      	movs	r6, #0
 8003d16:	f000 f819 	bl	8003d4c <_init>
 8003d1a:	4c0a      	ldr	r4, [pc, #40]	@ (8003d44 <__libc_init_array+0x40>)
 8003d1c:	4d0a      	ldr	r5, [pc, #40]	@ (8003d48 <__libc_init_array+0x44>)
 8003d1e:	1b64      	subs	r4, r4, r5
 8003d20:	10a4      	asrs	r4, r4, #2
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	00b3      	lsls	r3, r6, #2
 8003d2a:	58eb      	ldr	r3, [r5, r3]
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	00b3      	lsls	r3, r6, #2
 8003d34:	58eb      	ldr	r3, [r5, r3]
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	08003df8 	.word	0x08003df8
 8003d40:	08003df8 	.word	0x08003df8
 8003d44:	08003dfc 	.word	0x08003dfc
 8003d48:	08003df8 	.word	0x08003df8

08003d4c <_init>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr

08003d58 <_fini>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr
